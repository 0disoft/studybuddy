TITLE: Applying Intrinsic Size to Auto-Sized Images in CSS
DESCRIPTION: This CSS rule applies a `contain-intrinsic-size` to images that have `sizes="auto"` or `sizes` starting with `auto,`. This helps browsers reserve space for images before they load, preventing layout shifts and improving Cumulative Layout Shift (CLS) scores, especially for responsive images.
SOURCE: https://hacks.mozilla.org/2022/03/performance-tool-in-firefox-devtools-reloaded/

LANGUAGE: CSS
CODE:
```
img:is([sizes="auto" i], [sizes^="auto," i]) { contain-intrinsic-size: 3000px 1500px }
```

----------------------------------------

TITLE: Configuring HTTP Agent with Keep-Alive (CommonJS)
DESCRIPTION: This snippet illustrates how to instantiate and utilize an `http.Agent` with `keepAlive` enabled using CommonJS syntax. By setting `keepAlive: true`, the agent will reuse existing sockets for subsequent requests to the same host, improving performance by avoiding repeated TCP handshake overhead. The configured agent is then passed to an `http.request` call.
SOURCE: https://nodejs.org/dist/latest/docs/api/http.html

LANGUAGE: JavaScript
CODE:
```
const http = require('node:http');
const keepAliveAgent = new http.Agent({ keepAlive: true });
options.agent = keepAliveAgent;
http.request(options, onResponseCallback);
```

----------------------------------------

TITLE: Example of a CSP nonce Value (Plain)
DESCRIPTION: This snippet illustrates a `nonce` value used in Content Security Policy. It's a base64-encoded random string generated by the server for every HTTP response. The browser compares this value against the `nonce` attribute in `<script>` or `<style>` elements, loading the resource only if they match, thereby preventing XSS attacks.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy

LANGUAGE: plain
CODE:
```
'nonce-416d1177-4d12-4e3b-b7c9-f6c409789fb8'
```

----------------------------------------

TITLE: Basic fetch() Method Syntax in JavaScript
DESCRIPTION: This snippet shows the fundamental syntax for calling the `fetch()` method. It takes a `resource` argument, which can be a URL string or a `Request` object, and returns a Promise that resolves with a `Response` object upon successful network retrieval.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/fetch

LANGUAGE: JavaScript
CODE:
```
fetch(resource)
```

----------------------------------------

TITLE: Initializing UI Theme in JavaScript
DESCRIPTION: This JavaScript snippet detects and applies the user's preferred theme (dark or light) by checking local storage or the system's color scheme preference. It adds or removes the 'theme-dark' class from the document's root element to control the UI's appearance.
SOURCE: https://unpic.pics/img/svelte/

LANGUAGE: JavaScript
CODE:
```
const root = document.documentElement; const theme = localStorage.getItem("theme"); if ( theme === "dark" || (!theme && window.matchMedia("(prefers-color-scheme: dark)").matches) ) { root.classList.add("theme-dark"); } else { root.classList.remove("theme-dark"); }
```

----------------------------------------

TITLE: Setting HTTP Cookie with Path and Domain Attributes
DESCRIPTION: This snippet shows how to modify the default scope of a cookie by including the Path and Domain attributes in the Set-Cookie header. The Path attribute restricts the cookie to a specific URL path, while the Domain attribute specifies the domains for which the cookie is valid, allowing it to be sent to subdomains.
SOURCE: https://www.rfc-editor.org/rfc/rfc6265

LANGUAGE: HTTP
CODE:
```
Set-Cookie: SID=31d4d96e407aad42; Path=/; Domain=example.com
Cookie: SID=31d4d96e407aad42
```

----------------------------------------

TITLE: Syntax for addEventListener in JavaScript
DESCRIPTION: This snippet illustrates the three common syntaxes for the `addEventListener` method in JavaScript. It can accept a `type` and `listener`, or include an `options` object for advanced configuration, or a `useCapture` boolean for specifying the event phase. These variations provide flexibility in how event listeners are registered and behave.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

LANGUAGE: JavaScript
CODE:
```
addEventListener(type, listener)
addEventListener(type, listener, options)
addEventListener(type, listener, useCapture)
```

----------------------------------------

TITLE: Testing Component Events with Playwright Test (Svelte)
DESCRIPTION: This snippet demonstrates how to test event handling in a Svelte component using Playwright Test. It mounts a `Button` component, asserts its text content, simulates a click, and then verifies that the `onClick` event handler was triggered.
SOURCE: https://playwright.dev/docs/test-components

LANGUAGE: TypeScript
CODE:
```
test('event should work', async ({ mount }) => {  let clicked = false;  // Mount a component. Returns locator pointing to the component.  const component = await mount(    <Button title="Submit" onClick={() => { clicked = true }}></Button>  );  // As with any Playwright test, assert locator text.  await expect(component).toContainText('Submit');  // Perform locator click. This will trigger the event.  await component.click();  // Assert that respective events have been fired.  expect(clicked).toBeTruthy();});
```

----------------------------------------

TITLE: Demonstrating Falsy Values in JavaScript Conditionals
DESCRIPTION: This snippet illustrates how various falsy values in JavaScript behave when evaluated in a boolean context, specifically within an `if` statement. None of these `if` blocks will execute, demonstrating that the values `false`, `null`, `undefined`, `0`, `-0`, `0n`, `NaN`, and `""` are all coerced to `false`.
SOURCE: https://developer.mozilla.org/en-US/docs/Glossary/Falsy

LANGUAGE: JavaScript
CODE:
```
if (false) {
  // Not reachable
}

if (null) {
  // Not reachable
}

if (undefined) {
  // Not reachable
}

if (0) {
  // Not reachable
}

if (-0) {
  // Not reachable
}

if (0n) {
  // Not reachable
}

if (NaN) {
  // Not reachable
}

if ("") {
  // Not reachable
}
```

----------------------------------------

TITLE: Disabling All View Transitions for Reduced Motion in CSS
DESCRIPTION: This CSS media query targets users with `prefers-reduced-motion` enabled, setting `animation: none !important` for all view transition pseudo-elements (`::view-transition-group`, `::view-transition-old`, `::view-transition-new`). This ensures that no page transition animations occur for users who prefer minimal motion, enhancing accessibility.
SOURCE: https://svelte.dev/blog/view-transitions

LANGUAGE: CSS
CODE:
```
@media (prefers-reduced-motion) {
	::view-transition-group(*),
	::view-transition-old(*),
	::view-transition-new(*) {
		animation: none !important;
	}
}
```

----------------------------------------

TITLE: Initializing UI Theme Preferences in JavaScript
DESCRIPTION: This JavaScript snippet initializes and manages the user interface theme (dark, light, or system preference) for the Netlify documentation site. It detects the user's system color scheme preference, saves the chosen theme to local storage, and dynamically updates the document's `dark-mode` class. It also includes an event listener to react to real-time changes in the system's color scheme.
SOURCE: https://docs.netlify.com/forms/setup/

LANGUAGE: JavaScript
CODE:
```
(function (w) { if (!w) return; const darkQuery = w.matchMedia('(prefers-color-scheme: dark)'); const root = document.documentElement; function setTheme(newTheme) { if (newTheme === 'dark' || (newTheme === 'system' && darkQuery.matches)) { root.classList.add('dark-mode'); } else { root.classList.remove('dark-mode'); } w.__theme = newTheme; } w.__setPreferredTheme = function (newTheme) { setTheme(newTheme); try { localStorage.setItem('nf-docs-theme', w.__theme); } catch (err) {} }; // If using system theme, change colors in real time // in response to user settings darkQuery.addEventListener('change', function (event) { if (w.__theme === 'system') { if (event.matches) { root.classList.add('dark-mode'); } else { root.classList.remove('dark-mode'); } } }); let preferredTheme; // Try to get saved theme try { preferredTheme = localStorage.getItem('nf-docs-theme') || 'system'; } catch (err) {} // Initialize preferredTheme setTheme(preferredTheme); })(window);
```

----------------------------------------

TITLE: Fetching JSON Data with Simple CORS Request in JavaScript
DESCRIPTION: This JavaScript code demonstrates a simple cross-origin `fetch` request to retrieve JSON content from a different domain. It uses the `fetch` API to make a GET request, which, under the specified conditions, qualifies as a simple request and does not trigger a CORS preflight. The response is then parsed as JSON and logged to the console.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

LANGUAGE: JavaScript
CODE:
```
const fetchPromise = fetch("https://bar.other");

fetchPromise
  .then((response) => response.json())
  .then((data) => {
    console.log(data);
  });
```

----------------------------------------

TITLE: Loading Page Data with `load` Function in SvelteKit
DESCRIPTION: This JavaScript snippet defines a `load` function within a `+page.server.js` file, which runs on the server to fetch data for a SvelteKit page. It imports `posts` from a local `data.js` file and transforms it into an array of `summaries`, each containing a post's `slug` and `title`, making this data available to the corresponding Svelte component.
SOURCE: https://svelte.dev/tutorial/kit/page-data

LANGUAGE: JavaScript
CODE:
```
import { posts } from './data.js';

export function load() {
	return {
		summaries: posts.map((post) => ({
			slug: post.slug,
			title: post.title
		}))
	};
}
```

----------------------------------------

TITLE: Configuring package.json sideEffects for Library Modules
DESCRIPTION: This JSON snippet shows a `sideEffects` configuration within a `package.json` file, specifically for a library like Shopify Polaris. It lists patterns for files (e.g., CSS, SCSS) and specific JavaScript modules (`./esnext/index.js`, `./esnext/configure.js`) that contain necessary side effects and should not be tree-shaken, even if their exports are unused.
SOURCE: https://webpack.js.org/guides/tree-shaking/

LANGUAGE: JSON
CODE:
```
// ...
"sideEffects": [
  "**/*.css",
  "**/*.scss",
  "./esnext/index.js",
  "./esnext/configure.js"
],
// ...
```

----------------------------------------

TITLE: Declaring Reactive State with $state in TypeScript
DESCRIPTION: This example demonstrates how to declare a reactive state variable named count using the $state rune in Svelte. The variable is initialized with a numeric value of 0, making it automatically reactive within the Svelte component.
SOURCE: https://svelte.dev/docs/svelte/what-are-runes

LANGUAGE: TypeScript
CODE:
```
let count = $state(0);
```

----------------------------------------

TITLE: Event Handling with Event Object and Target Property - JavaScript
DESCRIPTION: Presents a complete example demonstrating event handling using addEventListener, including a helper random function and a modified bgChange function that accepts an event object. The event.target property is used to apply styles directly to the element that triggered the event, providing contextual information and enabling more dynamic interactions.
SOURCE: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events

LANGUAGE: js
CODE:
```
const btn = document.querySelector("button");

function random(number) {
  return Math.floor(Math.random() * (number + 1));
}

function bgChange(e) {
  const rndCol = `rgb(${random(255)} ${random(255)} ${random(255)})`;
  e.target.style.backgroundColor = rndCol;
  console.log(e);
}

btn.addEventListener("click", bgChange);
```

----------------------------------------

TITLE: Ensuring Consistent Event Ordering with Microtasks - JavaScript
DESCRIPTION: This revised `getData` method uses `queueMicrotask()` in the cache hit branch to ensure that the 'load' event dispatch and data setting always occur within a microtask. This balances the execution flow with the promise-based `fetch()` in the `else` branch, guaranteeing consistent ordering of operations regardless of whether the data is cached or fetched.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide

LANGUAGE: javascript
CODE:
```
customElement.prototype.getData = function (url) {
  if (this.cache[url]) {
    queueMicrotask(() => {
      this.data = this.cache[url];
      this.dispatchEvent(new Event("load"));
    });
  } else {
    fetch(url)
      .then((result) => result.arrayBuffer())
      .then((data) => {
        this.cache[url] = data;
        this.data = data;
        this.dispatchEvent(new Event("load"));
      });
  }
};
```

----------------------------------------

TITLE: Setting and Returning a Basic HTTP Cookie
DESCRIPTION: This example demonstrates the fundamental process of an origin server setting a simple session identifier (SID) cookie using the Set-Cookie header, and the user agent subsequently returning this cookie in a Cookie header in a future request. It illustrates the basic client-server interaction for state management.
SOURCE: https://www.rfc-editor.org/rfc/rfc6265

LANGUAGE: HTTP
CODE:
```
Set-Cookie: SID=31d4d96e407aad42
Cookie: SID=31d4d96e407aad42
```

----------------------------------------

TITLE: Fetching an Image with Request Object in JavaScript
DESCRIPTION: This snippet demonstrates how to fetch an image using the Fetch API. It creates a `Request` object for 'flowers.jpg', fetches it, checks for HTTP errors, converts the response to a `Blob`, and then displays the image by creating an Object URL and setting it as the `src` of an `<img>` element.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/fetch

LANGUAGE: js
CODE:
```
const myImage = document.querySelector("img");

const myRequest = new Request("flowers.jpg");

window
 .fetch(myRequest)
 .then((response) => {
 if (!response.ok) {
 throw new Error(`HTTP error! Status: ${response.status}`);
 }

 return response.blob();
 })
 .then((response) => {
 myImage.src = URL.createObjectURL(response);
 });
```

----------------------------------------

TITLE: Indicating Allowed Headers with Access-Control-Allow-Headers (HTTP)
DESCRIPTION: This header responds to a preflight request, indicating which HTTP headers can be used in the actual cross-origin request. It serves as the server's acknowledgment to the client's Access-Control-Request-Headers header, listing acceptable custom headers.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

LANGUAGE: http
CODE:
```
Access-Control-Allow-Headers: <header-name>[, <header-name>]*
```

----------------------------------------

TITLE: Creating and Handling a Basic Promise in JavaScript
DESCRIPTION: This snippet illustrates the fundamental use of `Promise` in JavaScript. It creates a new promise that resolves after a random delay, logs its lifecycle events to a `div` element, and demonstrates chaining `then()` and `catch()` methods for success and error handling. It also shows how to attach an event listener to a button to trigger the promise creation.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

LANGUAGE: JavaScript
CODE:
```
"use strict";

let promiseCount = 0;

function testPromise() {
  const thisPromiseCount = ++promiseCount;
  const log = document.getElementById("log");
  // begin
  log.insertAdjacentHTML("beforeend", `${thisPromiseCount}) Started<br>`);
  // We make a new promise: we promise a numeric count of this promise,
  // starting from 1 (after waiting 3s)
  const p1 = new Promise((resolve, reject) => {
    // The executor function is called with the ability
    // to resolve or reject the promise
    log.insertAdjacentHTML(
      "beforeend",
      `${thisPromiseCount}) Promise constructor<br>`,
    );
    // This is only an example to create asynchronism
    setTimeout(
      () => {
        // We fulfill the promise
        resolve(thisPromiseCount);
      },
      Math.random() * 2000 + 1000,
    );
  });

  // We define what to do when the promise is resolved with the then() call,
  // and what to do when the promise is rejected with the catch() call
  p1.then((val) => {
    // Log the fulfillment value
    log.insertAdjacentHTML("beforeend", `${val}) Promise fulfilled<br>`);
  }).catch((reason) => {
    // Log the rejection reason
    console.log(`Handle rejected promise (${reason}) here.`);
  });
  // end
  log.insertAdjacentHTML("beforeend", `${thisPromiseCount}) Promise made<br>`);
}

const btn = document.getElementById("make-promise");
btn.addEventListener("click", testPromise);
```

----------------------------------------

TITLE: Associating Description with ARIA Role in HTML
DESCRIPTION: This HTML example illustrates how `aria-describedby` links a `div` element to a descriptive `div` with `id="test"`. The descriptive `div` is given `role="tooltip"`, which, in Internet Explorer, makes it an 'accessible HTML element' and ensures its content is properly conveyed as a description for the first `div`.
SOURCE: https://www.w3.org/TR/using-aria/

LANGUAGE: HTML
CODE:
```
<div aria-describedby="test">text</div>      <div id="test" role="tooltip" >tooltip text</div>
```

----------------------------------------

TITLE: JavaScript Destructuring Syntax Examples
DESCRIPTION: This snippet provides various syntax examples for JavaScript destructuring, covering both array and object destructuring. It showcases array destructuring with element skipping, default values, rest parameters, and nested destructuring. Additionally, it illustrates basic object destructuring and property aliasing.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

LANGUAGE: JavaScript
CODE:
```
const [a, b] = array;
const [a, , b] = array;
const [a = aDefault, b] = array;
const [a, b, ...rest] = array;
const [a, , b, ...rest] = array;
const [a, b, ...{ pop, push }] = array;
const [a, b, ...[c, d]] = array;

const { a, b } = obj;
const { a: a1, b: b1 } = obj;
```

----------------------------------------

TITLE: Creating and Resolving JavaScript Promises Interactively
DESCRIPTION: This JavaScript snippet shows how to create and manage promises in response to user interaction. It uses setTimeout to simulate asynchronous operations and logs the promise's lifecycle, demonstrating how Promise constructors and .then() callbacks handle asynchronous fulfillment.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

LANGUAGE: javascript
CODE:
```
\"use strict\";\n\nlet promiseCount = 0;\n\nfunction testPromise() {\n  const thisPromiseCount = ++promiseCount;\n  const log = document.getElementById(\"log\");\n  // begin\n  log.insertAdjacentHTML(\"beforeend\", `${thisPromiseCount}) Started&lt;br&gt;`);\n  // We make a new promise: we promise a numeric count of this promise,\n  // starting from 1 (after waiting 3s)\n  const p1 = new Promise((resolve, reject) => {\n    // The executor function is called with the ability\n    // to resolve or reject the promise\n    log.insertAdjacentHTML(\n      \"beforeend\",\n      `${thisPromiseCount}) Promise constructor&lt;br&gt;`
```

----------------------------------------

TITLE: Advanced Cache-First Strategy with Network Fallback and Cache Update (Service Worker)
DESCRIPTION: This strategy extends the cache-first approach. If a resource is not found in the cache, it fetches it from the network. Crucially, it then clones the network response and adds the clone to the cache for future offline access, while returning the original response to the browser. `event.waitUntil()` ensures the caching operation completes before the service worker terminates.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers

LANGUAGE: JavaScript
CODE:
```
const putInCache = async (request, response) => {
  const cache = await caches.open("v1");
  await cache.put(request, response);
};

const cacheFirst = async (request, event) => {
  const responseFromCache = await caches.match(request);
  if (responseFromCache) {
    return responseFromCache;
  }
  const responseFromNetwork = await fetch(request);
  event.waitUntil(putInCache(request, responseFromNetwork.clone()));
  return responseFromNetwork;
};

self.addEventListener("fetch", (event) => {
  event.respondWith(cacheFirst(event.request, event));
});
```

----------------------------------------

TITLE: Implementing Basic Fetch Handler for Cloudflare Workers in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates a fundamental `fetch` handler for a Cloudflare Worker. It asynchronously processes incoming HTTP `Request` objects and returns a simple `Response` containing 'Hello World!', illustrating the core mechanism for handling web requests in the Workers runtime.
SOURCE: https://developers.cloudflare.com/workers/runtime-apis/fetch-event

LANGUAGE: JavaScript
CODE:
```
export default {  async fetch(request, env, ctx) {    return new Response('Hello World!');  },};
```

----------------------------------------

TITLE: Applying Theme Class to Document Element (JavaScript)
DESCRIPTION: This JavaScript code dynamically applies a theme class ('dark' or 'light') to the `document.documentElement`. It first checks `localStorage` for a 'sv:theme' preference. If the preference is 'system' or not set, it uses `window.matchMedia` to detect the user's system color scheme preference. Otherwise, it applies the stored theme. This is crucial for implementing dark/light mode functionality.
SOURCE: https://svelte.dev/docs/kit/adapter-static

LANGUAGE: JavaScript
CODE:
```
{ const theme = localStorage.getItem('sv:theme'); document.documentElement.classList.add( !theme || theme === 'system' ? window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light' : theme ); }
```

----------------------------------------

TITLE: Dynamic `this` Binding in JavaScript Function Context
DESCRIPTION: This example illustrates how the `this` value within a regular function depends on how the function is called. The `getThis` function is assigned to two different objects (`obj1` and `obj2`), and when invoked as a method of each object, `this` correctly refers to the respective calling object. This highlights the runtime binding of `this`.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this

LANGUAGE: js
CODE:
```
function getThis() {
 return this;
}

const obj1 = { name: "obj1" };
const obj2 = { name: "obj2" };

obj1.getThis = getThis;
obj2.getThis = getThis;

console.log(obj1.getThis()); // { name: 'obj1', getThis: [Function: getThis] }
console.log(obj2.getThis()); // { name: 'obj2', getThis: [Function: getThis] }
```

----------------------------------------

TITLE: Executing Malicious Code via eval() (JavaScript)
DESCRIPTION: This snippet illustrates an XSS attack where malicious code is passed as a string argument to the eval() function in JavaScript. eval() executes arbitrary strings as code, making it a dangerous API if user-controlled input is passed to it. CSP can disable the use of eval() to prevent this type of attack.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP

LANGUAGE: js
CODE:
```
eval("console.log(`You've been hacked!`)");
```

----------------------------------------

TITLE: Demonstrating HTML tabindex Behavior
DESCRIPTION: This HTML snippet illustrates how the `tabindex` attribute affects element focusability and sequential keyboard navigation. It shows elements with and without `tabindex`, and an element with `tabindex="0"` to demonstrate its effect on tab order.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex

LANGUAGE: HTML
CODE:
```
<p>Click anywhere in this pane, then try tabbing through the elements.</p>

<label>First in tab order:<input type="text" /></label>

<div tabindex="0">Tabbable due to tabindex.</div>

<div>Not tabbable: no tabindex.</div>

<label>Third in tab order:<input type="text" /></label>
```

----------------------------------------

TITLE: Incorrect ARIA Usage: `role=presentation` on Focusable Element (HTML)
DESCRIPTION: This snippet illustrates an incorrect application of `role=presentation` on a focusable `<button>` element. Applying `role=presentation` removes the element's semantic meaning from the accessibility tree, leading to a situation where users can focus on an element that appears as 'nothing' to assistive technologies.
SOURCE: https://www.w3.org/TR/using-aria/

LANGUAGE: HTML
CODE:
```
<button role=presentation>press me</button>
```

----------------------------------------

TITLE: Server Responding with Wildcard Access-Control-Allow-Origin
DESCRIPTION: This snippet illustrates an HTTP server response to a cross-origin request. The `Access-Control-Allow-Origin: *` header signifies that the requested resource can be accessed by any origin, enabling broad cross-origin access.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS

LANGUAGE: http
CODE:
```
HTTP/1.1 200 OK
Date: Mon, 01 Dec 2008 00:23:53 GMT
Server: Apache/2
Access-Control-Allow-Origin: *
Keep-Alive: timeout=2, max=100
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: application/xml

[…XML Data…]
```

----------------------------------------

TITLE: Basic fetch() Syntax - JavaScript
DESCRIPTION: This snippet illustrates the two primary syntaxes for the `fetch()` method. The first form takes a `resource` (URL string or `Request` object) to fetch. The second form additionally accepts an `options` object (a `RequestInit` object) to customize the request, such as specifying the HTTP method, headers, or body.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/fetch

LANGUAGE: JavaScript
CODE:
```
fetch(resource)
fetch(resource, options)
```

----------------------------------------

TITLE: Fetching JSON API Response with Error Handling in JavaScript
DESCRIPTION: This snippet demonstrates how to use the fetch() API with a Request object to interact with an API that returns JSON. It includes robust error handling by checking the HTTP status code and parsing the response as JSON. Errors during the fetch or response processing are caught and logged to the console.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/Request

LANGUAGE: js
CODE:
```
fetch(request)
 .then((response) => {
 if (response.status !== 200) {
 throw new Error("Something went wrong on API server!");
 }
 return response.json();
 })
 .then((response) => {
 console.debug(response);
 // …
 })
 .catch((error) => {
 console.error(error);
 });

```

----------------------------------------

TITLE: Object Destructuring with Renaming and Default Values (JavaScript)
DESCRIPTION: This example combines renaming variables with providing default values during object destructuring. It shows how `a` is renamed to `aa` and assigned its existing value, while `b` is renamed to `bb` and assigned a default value because it's missing from the source object.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

LANGUAGE: JavaScript
CODE:
```
const { a: aa = 10, b: bb = 5 } = { a: 3 };

console.log(aa); // 3
console.log(bb); // 5
```

----------------------------------------

TITLE: Measuring Core Web Vitals with web-vitals library in JavaScript
DESCRIPTION: This snippet demonstrates how to use the `web-vitals` JavaScript library to measure Core Web Vitals (CLS, INP, LCP) and send the collected metrics to an analytics endpoint. It defines a `sendToAnalytics` function that attempts to use `navigator.sendBeacon` for efficient data transmission, falling back to `fetch` if `sendBeacon` is not available. The `onCLS`, `onINP`, and `onLCP` functions from `web-vitals` are then called, passing `sendToAnalytics` as a callback to process each metric as it becomes available.
SOURCE: https://web.dev/vitals/

LANGUAGE: JavaScript
CODE:
```
import {onCLS, onINP, onLCP} from 'web-vitals';
    
    function sendToAnalytics(metric) {
      const body = JSON.stringify(metric);
      // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.
      (navigator.sendBeacon && navigator.sendBeacon('/analytics', body)) ||
        fetch('/analytics', {body, method: 'POST', keepalive: true});
    }
    
    onCLS(sendToAnalytics);
    onINP(sendToAnalytics);
    onLCP(sendToAnalytics);
```

----------------------------------------

TITLE: Registering Event Listeners with addEventListener (JavaScript)
DESCRIPTION: This snippet illustrates the different syntaxes for the `addEventListener()` method. It allows developers to attach a function or an object implementing `handleEvent()` to an `EventTarget` for a specified event `type`. The method supports optional `options` for advanced configuration or a `useCapture` boolean to control event phase handling.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

LANGUAGE: JavaScript
CODE:
```
addEventListener(type, listener)
addEventListener(type, listener, options)
addEventListener(type, listener, useCapture)
```

----------------------------------------

TITLE: Comprehensive Destructuring Syntax Examples in JavaScript
DESCRIPTION: This snippet provides a comprehensive overview of destructuring syntax in JavaScript for both arrays and objects. It illustrates various patterns including skipping elements, default values, rest parameters, nested destructuring, and property renaming. Both declaration (`const`) and assignment (`let`) forms are shown, highlighting the need for parentheses around object destructuring assignments.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

LANGUAGE: js
CODE:
```
const [a, b] = array;
const [a, , b] = array;
const [a = aDefault, b] = array;
const [a, b, ...rest] = array;
const [a, , b, ...rest] = array;
const [a, b, ...{ pop, push }] = array;
const [a, b, ...[c, d]] = array;

const { a, b } = obj;
const { a: a1, b: b1 } = obj;
const { a: a1 = aDefault, b = bDefault } = obj;
const { a, b, ...rest } = obj;
const { a: a1, b: b1, ...rest } = obj;
const { [key]: a } = obj;

let a, b, a1, b1, c, d, rest, pop, push;
[a, b] = array;
[a, , b] = array;
[a = aDefault, b] = array;
[a, b, ...rest] = array;
[a, , b, ...rest] = array;
[a, b, ...{ pop, push }] = array;
[a, b, ...[c, d]] = array;

({ a, b } = obj); // parentheses are required
({ a: a1, b: b1 } = obj);
({ a: a1 = aDefault, b = bDefault } = obj);
({ a, b, ...rest } = obj);
({ a: a1, b: b1, ...rest } = obj);

```

----------------------------------------

TITLE: Submitting File Uploads with Fetch API in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to submit a form, including file uploads, using the `fetch` API. It prevents the default form submission, creates a `FormData` object from the event target, and sends it as a POST request. It updates a `.result` element with 'Success' or an error message based on the fetch operation's outcome.
SOURCE: https://docs.netlify.com/forms/setup/

LANGUAGE: JavaScript
CODE:
```
document.forms.fileForm.addEventListener("submit", event => {
  event.preventDefault();
  const result = document.querySelector(".result");
  fetch("/", {
    body: new FormData(event.target),
    method: "POST"
  })
    .then(() => {
      result.innerText = "Success";
    })
    .catch(error => {
      result.innerText = `Failed: ${error}`;
    });
});
```

----------------------------------------

TITLE: Demonstrating Inconsistent Event Ordering - JavaScript
DESCRIPTION: This snippet demonstrates the inconsistent execution order when the `getData` method (from the previous example) is called. Depending on whether the data is cached, the 'load' event listener might fire before or after the 'Data fetched' log, highlighting a race condition caused by the synchronous vs. asynchronous data loading paths.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide

LANGUAGE: javascript
CODE:
```
element.addEventListener("load", () => console.log("Loaded data"));
console.log("Fetching data…");
element.getData();
console.log("Data fetched");
```

----------------------------------------

TITLE: Generating and Applying CSP Nonce in Express.js
DESCRIPTION: This Express.js code snippet illustrates how a server can dynamically generate a unique nonce for each request using crypto.randomUUID(). It then sets the Content-Security-Policy header with this nonce for script-src and injects the same nonce into the nonce attribute of both external and inline <script> tags in the HTML response, ensuring only authorized scripts are executed.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP

LANGUAGE: js
CODE:
```
function content(nonce) {
 return `\n <script nonce=\"${nonce}\" src=\"/main.js\"></script>\n <script nonce=\"${nonce}\">console.log(\"hello!\");</script>\n <h1>Hello world</h1> \n `;
}

app.get("/", (req, res) => {
 const nonce = crypto.randomUUID();
 res.setHeader("Content-Security-Policy", `script-src 'nonce-${nonce}'`);
 res.send(content(nonce));
});
```

----------------------------------------

TITLE: Correct ARIA Usage: `aria-hidden=true` with `tabindex=-1` and Visual Hiding (HTML/CSS)
DESCRIPTION: This snippet illustrates a correct scenario for using `aria-hidden="true"`. When an interactive element is visually hidden (e.g., `opacity:0` via CSS) and explicitly made unfocusable (`tabindex="-1"`), applying `aria-hidden="true"` is appropriate. This ensures the element is completely removed from the accessibility tree and cannot be focused by keyboard users.
SOURCE: https://www.w3.org/TR/using-aria/

LANGUAGE: HTML
CODE:
```
button {opacity:0}  <button tabindex="-1" aria-hidden="true">press me</button>
```

----------------------------------------

TITLE: Svelte Component Consuming Context
DESCRIPTION: This Svelte component (`notifications.svelte`) illustrates how to consume data provided via Svelte's context API. It uses `getContext` to retrieve the 'messages' store and then iterates over its contents to display notifications.
SOURCE: https://testing-library.com/docs/svelte-testing-library/example

LANGUAGE: Svelte
CODE:
```
<script>  import {getContext} from 'svelte'  export let label  const messages = getContext('messages')</script><div role="status" aria-label="{label}">  {#each $messages as message (message.id)}  <p>{message.text}</p>  <hr />  {/each}</div>
```

----------------------------------------

TITLE: Implementing Nonce-based Strict CSP in HTTP Header
DESCRIPTION: This HTTP header defines a nonce-based Content Security Policy. It restricts script loading to those with a matching nonce, blocks all object embeds, and prevents the use of the <base> element to set a base URI, enhancing security against XSS attacks.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP

LANGUAGE: http
CODE:
```
Content-Security-Policy:
  script-src 'nonce-{RANDOM}';
  object-src 'none';
  base-uri 'none';
```

----------------------------------------

TITLE: Handling Fetch API Response in JavaScript
DESCRIPTION: This snippet demonstrates how to consume a Request object using the fetch() API in JavaScript. It includes error handling for non-200 HTTP statuses, parses the successful response as JSON, and logs both successful data and any errors encountered during the fetch operation.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/Request

LANGUAGE: JavaScript
CODE:
```
fetch(request)
  .then((response) => {
    if (response.status !== 200) {
      throw new Error("Something went wrong on API server!");
    }
    return response.json();
  })
  .then((response) => {
    console.debug(response);
    // …
  })
  .catch((error) => {
    console.error(error);
  });
```

----------------------------------------

TITLE: Handling Fetch Events with Caching in Service Workers
DESCRIPTION: This JavaScript snippet demonstrates a Service Worker's `fetch` event listener. It implements a caching strategy where `GET` requests are handled by first checking if the requested URL is a static asset (defined in `ASSETS`) and serving it from the cache if available. For other requests, it attempts a network fetch, caching successful 200 responses, and falls back to the cache if the network request fails or returns an invalid response.
SOURCE: https://svelte.dev/docs/kit/service-workers

LANGUAGE: JavaScript
CODE:
```
addEventListener('fetch', (event) => {
	// ignore POST requests etc
	if (event.request.method !== 'GET') return;

	async function respond() {
		const url = new URL(event.request.url);
		const cache = await caches.open(CACHE);

		// `build`/`files` can always be served from the cache
		if (ASSETS.includes(url.pathname)) {
			const response = await cache.match(url.pathname);

			if (response) {
				return response;
			}
		}

		// for everything else, try the network first, but
		// fall back to the cache if we're offline
		try {
			const response = await fetch(event.request);

			// if we're offline, fetch can return a value that is not a Response
			// instead of throwing - and we can't pass this non-Response to respondWith
			if (!(response instanceof Response)) {
				throw new Error('invalid response from fetch');
			}

			if (response.status === 200) {
				cache.put(event.request, response.clone());
			}

			return response;
		} catch (err) {
			const response = await cache.match(event.request);

			if (response) {
				return response;
			}

			// if there's no cache, then just error out
			// as there is nothing we can do to respond to this request
			throw err;
		}
	}

	event.respondWith(respond());
});
```

----------------------------------------

TITLE: Implementing Service Worker Cache-First Strategy with Preload in JavaScript
DESCRIPTION: This JavaScript snippet defines core service worker functions: `addResourcesToCache` for bulk caching, `putInCache` for individual responses, and `cacheFirst` for a robust caching strategy. It integrates navigation preload and handles network fallbacks, demonstrating the `install`, `activate`, and `fetch` event listeners for comprehensive offline support.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers

LANGUAGE: JavaScript
CODE:
```
const addResourcesToCache = async (resources) => {\n const cache = await caches.open(\"v1\");\n await cache.addAll(resources);\n};\n\nconst putInCache = async (request, response) => {\n const cache = await caches.open(\"v1\");\n await cache.put(request, response);\n};\n\nconst cacheFirst = async ({\n request,\n preloadResponsePromise,\n fallbackUrl,\n event,\n}) => {\n // First try to get the resource from the cache\n const responseFromCache = await caches.match(request);\n if (responseFromCache) {\n return responseFromCache;\n }\n\n // Next try to use (and cache) the preloaded response, if it's there\n const preloadResponse = await preloadResponsePromise;\n if (preloadResponse) {\n console.info(\"using preload response\", preloadResponse);\n event.waitUntil(putInCache(request, preloadResponse.clone()));\n return preloadResponse;\n }\n\n // Next try to get the resource from the network\n try {\n const responseFromNetwork = await fetch(request);\n // response may be used only once\n // we need to save clone to put one copy in cache\n // and serve second one\n event.waitUntil(putInCache(request, responseFromNetwork.clone()));\n return responseFromNetwork;\n } catch (error) {\n const fallbackResponse = await caches.match(fallbackUrl);\n if (fallbackResponse) {\n return fallbackResponse;\n }\n // when even the fallback response is not available,\n // there is nothing we can do, but we must always\n // return a Response object\n return new Response(\"Network error happened\", {\n status: 408,\n headers: { \"Content-Type\": \"text/plain\" },\n });\n }\n};\n\n// Enable navigation preload\nconst enableNavigationPreload = async () => {\n if (self.registration.navigationPreload) {\n await self.registration.navigationPreload.enable();\n }\n};\n\nself.addEventListener(\"activate\", (event) => {\n event.waitUntil(enableNavigationPreload());\n});\n\nself.addEventListener(\"install\", (event) => {\n event.waitUntil(\n addResourcesToCache([\n \"/\",\n \"/index.html\",\n \"/style.css\",\n \"/app.js\",\n \"/image-list.js\",\n \"/star-wars-logo.jpg\",\n \"/gallery/bountyHunters.jpg\",\n \"/gallery/myLittleVader.jpg\",\n \"/gallery/snowTroopers.jpg\",\n ]),\n );\n});\n\nself.addEventListener(\"fetch\", (event) => {\n event.respondWith(\n cacheFirst({\n request: event.request,\n preloadResponsePromise: event.preloadResponse,\n fallbackUrl: \"/gallery/myLittleVader.jpg\",\n event,\n }),\n );\n});
```

----------------------------------------

TITLE: Implementing Dynamic Nonce CSP in Express.js
DESCRIPTION: This Express.js code demonstrates how to generate a unique nonce for each HTTP request using `crypto.randomUUID()`. The nonce is then included in the `Content-Security-Policy` header and injected into the `nonce` attribute of both external and inline `<script>` tags within the HTML response, ensuring only trusted scripts are executed.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/HTTP/Guides/CSP

LANGUAGE: js
CODE:
```
function content(nonce) {
  return `\n        <script nonce="${nonce}" src="/main.js"></script>\n        <script nonce="${nonce}">console.log("hello!");</script>\n        <h1>Hello world</h1> \n        `;
}

app.get("/", (req, res) => {
  const nonce = crypto.randomUUID();
  res.setHeader("Content-Security-Policy", `script-src 'nonce-${nonce}'`);
  res.send(content(nonce));
});
```

----------------------------------------

TITLE: Demonstrating XSS Vulnerability with JSON.stringify
DESCRIPTION: This code illustrates a common Cross-Site Scripting (XSS) vulnerability that arises when directly embedding user input serialized by `JSON.stringify` into an HTML script block. The example shows how malicious script tags within the user input can break out of the original script block, leading to arbitrary code execution.
SOURCE: https://github.com/rich-harris/devalue#_snippet_23

LANGUAGE: JavaScript
CODE:
```
const state = {
	userinput: `</script><script src='https://evil.com/mwahaha.js'>`
};

const template = `
<script>
  // NEVER DO THIS
  var preloaded = ${JSON.stringify(state)};
</script>`;
```

----------------------------------------

TITLE: Using Callback Props for Component Events (TypeScript)
DESCRIPTION: This snippet illustrates the Svelte 5 recommended approach for component communication using callback props with TypeScript. It exports `decrement` and `increment` functions as props, which are directly invoked by button click handlers, providing a type-safe and future-proof way to handle component events.
SOURCE: https://svelte.dev/docs/svelte/legacy-on

LANGUAGE: Svelte
CODE:
```
<script lang="ts">
	export let decrement;
	export let increment;
</script>

<button on:click={decrement}>decrement</button>
<button on:click={increment}>increment</button>
```

----------------------------------------

TITLE: Comparing setTimeout and queueMicrotask Execution Order
DESCRIPTION: This example illustrates the priority of microtasks over macro-tasks like `setTimeout` in the event loop. It includes the HTML logging element, a JavaScript helper for logging, and the main JavaScript code that schedules both a zero-delay timeout and a microtask, demonstrating their distinct execution order.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API/Microtask_guide

LANGUAGE: HTML
CODE:
```
<pre id="log"></pre>
```

LANGUAGE: JavaScript
CODE:
```
const logElem = document.getElementById("log");
const log = (s) => (logElem.innerText += `${s}\n`);
```

LANGUAGE: JavaScript
CODE:
```
const callback = () => log("Regular timeout callback has run");

const urgentCallback = () => log("*** Oh noes! An urgent callback has run!");

log("Main program started");
setTimeout(callback, 0);
queueMicrotask(urgentCallback);
log("Main program exiting");
```

----------------------------------------

TITLE: Demonstrating XSS with PHP Error Page
DESCRIPTION: This PHP code snippet represents a basic error page designed to inform users about missing pages (e.g., a 404 error). It directly prints the URL of the requested resource using `urldecode($_SERVER["REQUEST_URI"])` without any output encoding. This lack of sanitization makes the page vulnerable to reflected Cross-Site Scripting (XSS) attacks, as demonstrated by injecting a script tag into the URL.
SOURCE: https://owasp.org/www-community/attacks/xss/

LANGUAGE: PHP
CODE:
```
<html>
<body>
<?php
print "Not found: " . urldecode($_SERVER["REQUEST_URI"]);
?>

</body>
</html>
```

----------------------------------------

TITLE: Incorrect Accessible Background Image Markup - HTML
DESCRIPTION: This snippet shows an incorrect method for providing alternative text for a CSS background image. Placing role="img" and aria-label directly on a <div> that also contains other content can lead to the aria-label obscuring or conflicting with the accessible name calculation for the inner content.
SOURCE: https://www.w3.org/TR/using-aria/

LANGUAGE: HTML
CODE:
```
<div class="background-image" role="img" aria-label="blah blah blah">   [all the rest of my content]   </div>
```

----------------------------------------

TITLE: Overriding Module Type with .cjs and .mjs Extensions in Node.js
DESCRIPTION: This JavaScript snippet demonstrates how `.cjs` and `.mjs` file extensions explicitly define a module's type, overriding the `package.json` `'type'` field. Files ending with `.cjs` are always CommonJS, and `.mjs` files are always ES modules, enabling mixed module types within a single Node.js package.
SOURCE: https://nodejs.org/docs/latest-v18.x/api/packages.html

LANGUAGE: JavaScript
CODE:
```
import './legacy-file.cjs';
// Loaded as CommonJS since .cjs is always loaded as CommonJS.

import 'commonjs-package/src/index.mjs';
// Loaded as ES module since .mjs is always loaded as ES module.
```

----------------------------------------

TITLE: Adding a Simple Click Event Listener in JavaScript
DESCRIPTION: This snippet demonstrates how to attach a basic click event listener to a DOM element using `addEventListener()`. The `modifyText()` function is called when the table is clicked, toggling the text content of the 't2' element between 'two' and 'three'. This illustrates event bubbling where clicks on child elements propagate up to the registered handler on the parent.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

LANGUAGE: html
CODE:
```
&lt;table id=\"outside\"&gt;\n &lt;tr&gt;\n &lt;td id=\"t1\"&gt;one&lt;/td&gt;\n &lt;/tr&gt;\n &lt;tr&gt;\n &lt;td id=\"t2\"&gt;two&lt;/td&gt;\n &lt;/tr&gt;\n&lt;/table&gt;
```

LANGUAGE: javascript
CODE:
```
function modifyText() {\n const t2 = document.getElementById(\"t2\");\n const isNodeThree = t2.firstChild.nodeValue === \"three\";\n t2.firstChild.nodeValue = isNodeThree ? \"two\" : \"three\";\n}\n\n// Add event listener to table\nconst el = document.getElementById(\"outside\");\nel.addEventListener(\"click\", modifyText, false);
```

----------------------------------------

TITLE: Chaining Promises with Deferred Error Handling - JavaScript
DESCRIPTION: This example demonstrates a promise chain where rejection handling is centralized at the end using a single `catch()` method. Fulfillment handlers are chained sequentially, and any rejection occurring at any point in the chain will propagate down to the final `catch()` block, simplifying error management.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

LANGUAGE: JavaScript
CODE:
```
myPromise
  .then(handleFulfilledA)
  .then(handleFulfilledB)
  .then(handleFulfilledC)
  .catch(handleRejectedAny);
```

----------------------------------------

TITLE: Incorrectly Preserving Plus Signs in URLSearchParams (JavaScript)
DESCRIPTION: This example shows a common pitfall where URLSearchParams interprets plus signs (+) as spaces when initialized from a string, leading to data corruption, especially with Base64 encoded data. It highlights that direct string interpolation into the constructor can alter data.
SOURCE: https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams

LANGUAGE: js
CODE:
```
const rawData = "\x13à\x17@\x1F\x80";
const base64Data = btoa(rawData); // 'E+AXQB+A'

const searchParams = new URLSearchParams(`bin=${base64Data}`); // 'bin=E+AXQB+A'
const binQuery = searchParams.get("bin"); // 'E AXQB A', '+' is replaced by spaces

console.log(atob(binQuery) === rawData); // false
```

----------------------------------------

TITLE: HTML Parsing of Self-Closing Tags vs. Void Elements
DESCRIPTION: This snippet highlights the crucial difference in how HTML parsers interpret /> compared to XML. It shows that for void elements like <br>, the /> is ignored, and the element self-closes due to its nature. However, for non-void elements like <div>, /> does not cause self-closure in HTML, leading to unexpected open tags.
SOURCE: https://jakearchibald.com/2023/against-self-closing-tags-in-html/

LANGUAGE: HTML
CODE:
```
<br /> The br is closed. This text is not inside the br.

But also:

<br> The br is closed. This text is not inside the br.

And this is where it gets confusing:

<div /> The div is open. This text is inside the div.
```

----------------------------------------

TITLE: Unit Testing React Components using Storybook and React Testing Library
DESCRIPTION: This snippet demonstrates how to unit test a React component by importing and rendering a Storybook story. It uses `@storybook/testing-react`'s `composeStories` to compile a specific story, sets up a DOM container for rendering, and then verifies the rendered output using Jest and React Testing Library assertions.
SOURCE: https://storybook.js.org/

LANGUAGE: JavaScript
CODE:
```
import React from 'react';
import { render, unmountComponentAtNode } from 'react-dom';
import { act } from 'react-dom/test-utils';
import { composeStories } from '@storybook/testing-react';
import * as stories from './UserCard.stories';

// Compile the "MissingProfileImage" story
const { MissingProfileImage } = composeStories(stories);

let container = null;
beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  unmountComponentAtNode(container);
  container.remove();
  container = null;
});

it('renders a fallback profile image', () => {
  // Render the story
  act(() => {
    render(<MissingProfileImage />, container);
  });

  // Verify the DOM structure
  expect(container.querySelector('img').getAttribute('src'))
    .toEqual(
      '/images/user-fallback.png'
    );
});
```