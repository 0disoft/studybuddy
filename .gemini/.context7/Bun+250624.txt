TITLE: Bun.serve() Configuration for HTML Routes and API Endpoints
DESCRIPTION: Illustrates a complete `Bun.serve()` setup, demonstrating how to import and route HTML files, and define API endpoints (GET, POST) with database interaction using `bun:sql`. It also shows enabling development mode.
SOURCE: https://bun.sh/docs/bundler/fullstack

LANGUAGE: ts
CODE:
```
import { sql, serve } from "bun";
import dashboard from "./dashboard.html";
import homepage from "./index.html";

const server = serve({
  routes: {
    // ** HTML imports **
    // Bundle & route index.html to "/". This uses HTMLRewriter to scan the HTML for `<script>` and `<link>` tags, run's Bun's JavaScript & CSS bundler on them, transpiles any TypeScript, JSX, and TSX, downlevels CSS with Bun's CSS parser and serves the result.
    "/": homepage,
    // Bundle & route dashboard.html to "/dashboard"
    "/dashboard": dashboard,

    // ** API endpoints ** (Bun v1.2.3+ required)
    "/api/users": {
      async GET(req) {
        const users = await sql`SELECT * FROM users`;
        return Response.json(users);
      },
      async POST(req) {
        const { name, email } = await req.json();
        const [user] =
          await sql`INSERT INTO users (name, email) VALUES (${name}, ${email})`;
        return Response.json(user);
      }
    },
    "/api/users/:id": async req => {
      const { id } = req.params;
      const [user] = await sql`SELECT * FROM users WHERE id = ${id}`;
      return Response.json(user);
    }
  },

  // Enable development mode for:
  // - Detailed error messages
  // - Hot reloading (Bun v1.2.3+ required)
  development: true,

  // Prior to v1.2.3, the `fetch` option was used to handle all API requests. It is now optional.
  // async fetch(req) {
  //   // Return 404 for unmatched routes
  //   return new Response("Not Found", { status: 404 });
  // },
});

console.log(`Listening on ${server.url}`);
```

----------------------------------------

TITLE: Install Bun on macOS/Linux using curl
DESCRIPTION: This command downloads and installs Bun on macOS, Linux, and WSL systems. On Linux, the `unzip` package is required (e.g., `sudo apt install unzip`), and kernel version 5.6 or higher is strongly recommended (minimum 5.1).
SOURCE: https://bun.sh/docs/installation

LANGUAGE: bash
CODE:
```
curl -fsSL https://bun.sh/install | bash # for macOS, Linux, and WSL
```

----------------------------------------

TITLE: Integrate Bun Install into GitHub Actions CI/CD Pipeline
DESCRIPTION: This snippet provides a GitHub Actions workflow example for installing Bun and its dependencies in a CI/CD pipeline. It outlines steps for checking out the repository, setting up Bun using `oven-sh/setup-bun`, installing project dependencies, and building the application.
SOURCE: https://bun.sh/docs/cli/install

LANGUAGE: yaml
CODE:
```
name: bun-types
jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: bun install
      - name: Build app
        run: bun run build
```

----------------------------------------

TITLE: Define an asynchronous Bun test with async/await
DESCRIPTION: Illustrates how to write tests that involve asynchronous operations using `async/await` syntax. The test will wait for the promise to resolve before asserting the result.
SOURCE: https://bun.sh/docs/test/writing

LANGUAGE: TypeScript
CODE:
```
import { expect, test } from "bun:test";

test("2 * 2", async () => {
  const result = await Promise.resolve(2 * 2);
  expect(result).toEqual(4);
});
```

----------------------------------------

TITLE: Bun Auto-Installation Example
DESCRIPTION: This snippet demonstrates Bun's core auto-installation feature. When this script is run for the first time, Bun automatically installs the 'foo' package into its global cache. Subsequent runs will use the cached version, eliminating the need for manual installation commands like 'bun install' or 'npm install'.
SOURCE: https://bun.sh/docs/runtime/autoimport

LANGUAGE: ts
CODE:
```
import { foo } from "foo"; // install `latest` version

foo();
```

----------------------------------------

TITLE: Execute JavaScript Files with `bun run`
DESCRIPTION: Demonstrates the basic usage of the `bun run` command to execute a standard JavaScript file. This is the primary method for running scripts with Bun.
SOURCE: https://bun.sh/docs/cli/run

LANGUAGE: Shell
CODE:
```
bun run index.js
```

----------------------------------------

TITLE: Define Type-Safe Routes with Parameters in Bun.serve
DESCRIPTION: Demonstrates how to define routes with dynamic parameters (e.g., `:orgId`, `:repoId`) in Bun.serve. TypeScript automatically infers the types of `request.params` when route paths are string literals, enabling autocompletion. Shows both implicit and explicit typing for `BunRequest`.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: TypeScript
CODE:
```
import type { BunRequest } from "bun";

Bun.serve({
  routes: {
    // TypeScript knows the shape of params when passed as a string literal
    "/orgs/:orgId/repos/:repoId": req => {
      const { orgId, repoId } = req.params;
      return Response.json({ orgId, repoId });
    },

    "/orgs/:orgId/repos/:repoId/settings": (
      // optional: you can explicitly pass a type to BunRequest:
      req: BunRequest<"/orgs/:orgId/repos/:repoId/settings">,
    ) => {
      const { orgId, repoId } = req.params;
      return Response.json({ orgId, repoId });
    },
  },
});
```

----------------------------------------

TITLE: Run a Script Defined in package.json
DESCRIPTION: This command executes the `start` script defined in `package.json` using Bun, which in turn runs the `index.ts` file.
SOURCE: https://bun.sh/docs/quickstart

LANGUAGE: Shell
CODE:
```
bun run start
```

----------------------------------------

TITLE: Bun.serve() HTTP Server with Routing
DESCRIPTION: This snippet demonstrates how to start an HTTP server using `Bun.serve()`, showcasing various routing capabilities including static paths, dynamic parameters, HTTP method-specific handlers, wildcard routes, redirects, and serving files from memory. It highlights the `routes` option for defining server behavior.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: JavaScript
CODE:
```
Bun.serve({
  // `routes` requires Bun v1.2.3+
  routes: {
    // Static routes
    "/api/status": new Response("OK"),

    // Dynamic routes
    "/users/:id": req => {
      return new Response(`Hello User ${req.params.id}!`);
    },

    // Per-HTTP method handlers
    "/api/posts": {
      GET: () => new Response("List posts"),
      POST: async req => {
        const body = await req.json();
        return Response.json({ created: true, ...body });
      }
    },

    // Wildcard route for all routes that start with "/api/" and aren't otherwise matched
    "/api/*": Response.json({ message: "Not found" }, { status: 404 }),

    // Redirect from /blog/hello to /blog/hello/world
    "/blog/hello": Response.redirect("/blog/hello/world"),

    // Serve a file by buffering it in memory
    "/favicon.ico": new Response(await Bun.file("./favicon.ico").bytes(), {
      headers: {
        "Content-Type": "image/x-icon"
      }
    })
  },

  // (optional) fallback for unmatched routes:
  // Required if Bun's version < 1.2.3
  fetch(req) {
    return new Response("Not Found", { status: 404 });
  }
});
```

----------------------------------------

TITLE: Bun.serve() HTTP Server API Reference
DESCRIPTION: Detailed documentation for Bun's built-in HTTP server, `Bun.serve()`, covering its configuration, routing, error handling, lifecycle methods, and WebSocket integration.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: APIDOC
CODE:
```
Bun.serve() API:
  - Routing
  - Static responses
  - Route precedence
  - Per-HTTP Method Routes
  - Hot Route Reloading
  - Error Handling
  - HTML imports
  - Practical example: REST API
  - Routing performance
  - `fetch` request handler
  - Changing the `port` and `hostname`
  - Unix domain sockets
  - Abstract namespace sockets
  - `error` callback
  - TLS
  - Server name indication (SNI)
  - idleTimeout
  - export default syntax
  - Streaming files

Server Lifecycle Methods:
  - `server.stop()`: Stop the server
  - `server.ref()`: Process lifecycle control
  - `server.unref()`: Process lifecycle control
  - `server.reload()`: Hot reload handlers

Per-Request Controls:
  - `server.timeout(Request, seconds)`: Custom request timeouts
  - `server.requestIP(Request)`: Get client information

Working with Cookies:
  - Reading cookies
  - Setting cookies
  - Deleting cookies

Server Metrics:
  - `server.pendingRequests`: Number of pending requests
  - `server.pendingWebSockets`: Number of pending WebSockets
  - `server.subscriberCount(topic)`: WebSocket subscribers count

WebSocket Configuration:
  - `server.publish(topic, data, compress)`: WebSocket Message Publishing

WebSocket Handler Options
Benchmarks
Reference
```

----------------------------------------

TITLE: Initialize Bun Project with Default tsconfig.json
DESCRIPTION: Command to initialize a new Bun project. This command automatically generates a `tsconfig.json` file pre-configured with the recommended compiler options, with stricter flags disabled by default.
SOURCE: https://bun.sh/docs/typescript

LANGUAGE: Shell
CODE:
```
bun init
```

----------------------------------------

TITLE: Add a Development Dependency with Bun
DESCRIPTION: Shows how to add a package as a development dependency, which will be listed under `devDependencies` in your `package.json`. This is useful for tools and libraries only needed during development, like type definitions.
SOURCE: https://bun.sh/docs/cli/add

LANGUAGE: Shell
CODE:
```
bun add --dev @types/react
bun add -d @types/react
```

----------------------------------------

TITLE: Install Project Dependencies with Bun
DESCRIPTION: The `bun install` command installs all project dependencies, including `dependencies`, `devDependencies`, `optionalDependencies`, and `peerDependencies`. It also runs pre/post install/prepare scripts and writes a `bun.lock` file.
SOURCE: https://bun.sh/docs/cli/install

LANGUAGE: bash
CODE:
```
bun install
```

----------------------------------------

TITLE: Import and Use CSS Modules in TSX
DESCRIPTION: Shows how to import CSS module files into a TSX component and apply their locally scoped class names using the `className` prop. This demonstrates how Bun's bundler makes unique identifiers available via the imported `styles` object.
SOURCE: https://bun.sh/docs/bundler/css

LANGUAGE: tsx
CODE:
```
import styles from "./styles.module.css";
import otherStyles from "./other-styles.module.css";

export default function App() {
  return (
    <>
      <button className={styles.button}>Red button!</button>
      <button className={otherStyles.button}>Blue button!</button>
    </>
  );
}
```

----------------------------------------

TITLE: Bun Build Command Examples
DESCRIPTION: This section provides practical examples demonstrating how to use the `bun build` command for common development scenarios. These examples cover bundling frontend web applications, optimizing code for Bun's runtime, and creating standalone executables.
SOURCE: https://bun.sh/docs/bundler

LANGUAGE: shell
CODE:
```
bun build --outfile=bundle.js ./src/index.ts
```

LANGUAGE: shell
CODE:
```
bun build --minify --splitting --outdir=out ./index.jsx ./lib/worker.ts
```

LANGUAGE: shell
CODE:
```
bun build --target=bun --outfile=server.js ./server.ts
```

LANGUAGE: shell
CODE:
```
bun build --compile --outfile=my-app ./cli.ts
```

----------------------------------------

TITLE: Bun Server: Set cookies on outgoing responses
DESCRIPTION: Illustrates how to set new cookies or modify existing ones using the `set()` method on the `request.cookies` `CookieMap`. Bun automatically applies these changes to the outgoing response, supporting various cookie options like `maxAge`, `httpOnly`, `secure`, and `path`.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: JavaScript
CODE:
```
Bun.serve({
  routes: {
    "/login": req => {
      const cookies = req.cookies;

      // Set a cookie with various options
      cookies.set("user_id", "12345", {
        maxAge: 60 * 60 * 24 * 7, // 1 week
        httpOnly: true,
        secure: true,
        path: "/",
      });

      // Add a theme preference cookie
      cookies.set("theme", "dark");

      // Modified cookies from the request are automatically applied to the response
      return new Response("Login successful");
    },
  },
});
```

----------------------------------------

TITLE: Accessing Environment Variables via process.env
DESCRIPTION: Demonstrates the standard way to access environment variables in a Bun application using `process.env`. This example retrieves the value of `API_TOKEN`.
SOURCE: https://bun.sh/docs/runtime/env

LANGUAGE: JavaScript
CODE:
```
process.env.API_TOKEN; // => "secret"
```

----------------------------------------

TITLE: Bun Build Command for Full-stack Executable
DESCRIPTION: This command compiles the full-stack application into a single, self-contained executable. It bundles the server code, Bun runtime, frontend assets, and npm packages into a single binary.
SOURCE: https://bun.sh/docs/bundler/executables

LANGUAGE: Shell
CODE:
```
bun build --compile ./server.ts --outfile myapp
```

----------------------------------------

TITLE: Install a Package with Bun
DESCRIPTION: This command installs the `figlet` package, a utility for converting strings to ASCII art, into the project's dependencies using Bun's package manager.
SOURCE: https://bun.sh/docs/quickstart

LANGUAGE: Shell
CODE:
```
bun add figlet
```

----------------------------------------

TITLE: Scaffold a Bun React Project with Tailwind CSS
DESCRIPTION: Illustrates using `bun init --react=tailwind` to create a Bun React project with Tailwind CSS pre-configured for Bun's bundler and dev server.
SOURCE: https://bun.sh/docs/cli/init

LANGUAGE: bash
CODE:
```
$ bun init --react=tailwind
```

----------------------------------------

TITLE: Bun Global Object API Reference
DESCRIPTION: Comprehensive API documentation for the global `Bun` object, detailing its properties and utility methods for various operations like versioning, environment access, file system interactions, compression, and more. Includes functions from the `bun:jsc` module.
SOURCE: https://bun.sh/docs/api/utils

LANGUAGE: APIDOC
CODE:
```
Bun Global Object:
  version: string
    Description: A string containing the version of the `bun` CLI that is currently running.
    Example: Bun.version; // => "0.6.4"
  revision: string
    Description: The Git revision hash of the Bun build.
  env: object
    Description: An object containing environment variables.
  main: string
    Description: The path to the main entry file.
  sleep(ms: number): Promise<void>
    Description: Asynchronously pauses execution for a specified number of milliseconds.
    Parameters:
      ms: number - The number of milliseconds to sleep.
  sleepSync(ms: number): void
    Description: Synchronously pauses execution for a specified number of milliseconds.
    Parameters:
      ms: number - The number of milliseconds to sleep.
  which(command: string): string | null
    Description: Finds the path to an executable command in the system's PATH.
    Parameters:
      command: string - The name of the command to find.
    Returns: string | null - The path to the command or null if not found.
  randomUUIDv7(): string
    Description: Generates a UUIDv7 string.
  peek(value: any): any
    Description: Logs a value to the console and returns it, useful for debugging.
    Parameters:
      value: any - The value to peek.
    Returns: any - The original value.
  openInEditor(path: string, line?: number, column?: number): void
    Description: Opens a file in the default system editor.
    Parameters:
      path: string - The path to the file.
      line?: number - Optional line number.
      column?: number - Optional column number.
  deepEquals(a: any, b: any): boolean
    Description: Performs a deep comparison between two values.
    Parameters:
      a: any - The first value.
      b: any - The second value.
    Returns: boolean - True if values are deeply equal, false otherwise.
  escapeHTML(html: string): string
    Description: Escapes HTML special characters in a string.
    Parameters:
      html: string - The HTML string to escape.
    Returns: string - The escaped string.
  stringWidth(text: string): number
    Description: Calculates the visual width of a string, accounting for wide characters.
    Parameters:
      text: string - The string to measure.
    Returns: number - The visual width.
    Note: ~6,756x faster `string-width` alternative.
  fileURLToPath(url: string | URL): string
    Description: Converts a file URL to a file path.
    Parameters:
      url: string | URL - The file URL.
    Returns: string - The file path.
  pathToFileURL(path: string): URL
    Description: Converts a file path to a file URL.
    Parameters:
      path: string - The file path.
    Returns: URL - The file URL object.
  gzipSync(data: string | BufferSource): Uint8Array
    Description: Synchronously compresses data using gzip.
    Parameters:
      data: string | BufferSource - The data to compress.
    Returns: Uint8Array - The gzipped data.
  gunzipSync(data: BufferSource): Uint8Array
    Description: Synchronously decompresses gzip data.
    Parameters:
      data: BufferSource - The gzipped data.
    Returns: Uint8Array - The decompressed data.
  deflateSync(data: string | BufferSource): Uint8Array
    Description: Synchronously compresses data using deflate.
    Parameters:
      data: string | BufferSource - The data to compress.
    Returns: Uint8Array - The deflated data.
  inflateSync(data: BufferSource): Uint8Array
    Description: Synchronously decompresses deflate data.
    Parameters:
      data: BufferSource - The decompressed data.
    Returns: Uint8Array - The decompressed data.
  inspect(value: any, options?: object): string
    Description: Returns a string representation of an object, useful for debugging.
    Parameters:
      value: any - The value to inspect.
      options?: object - Optional inspection options.
    Returns: string - The inspected string.
  inspect.custom: symbol
    Description: A symbol used to define custom inspection logic for objects.
  inspect.table(tabularData: any, properties?: string[], options?: object): void
    Description: Displays tabular data in a console table.
    Parameters:
      tabularData: any - The data to display.
      properties?: string[] - Optional array of properties to display.
      options?: object - Optional display options.
  nanoseconds(): bigint
    Description: Returns the current high-resolution time in nanoseconds as a BigInt.
    Returns: bigint - The current time in nanoseconds.
  readableStreamTo*(stream: ReadableStream): Promise<any>
    Description: Utility methods to convert a ReadableStream to various formats (e.g., text, arrayBuffer).
    Parameters:
      stream: ReadableStream - The readable stream to convert.
    Returns: Promise<any> - A promise resolving to the converted data.
  resolveSync(specifier: string, parentURL?: string): string
    Description: Synchronously resolves a module specifier to its full path.
    Parameters:
      specifier: string - The module specifier to resolve.
      parentURL?: string - Optional URL of the parent module.
    Returns: string - The resolved module path.
bun:jsc Module:
  serialize(value: any): ArrayBuffer
    Description: Serializes a JavaScript value into an ArrayBuffer using Bun's internal JSC serialization.
    Parameters:
      value: any - The value to serialize.
    Returns: ArrayBuffer - The serialized data.
  deserialize(buffer: ArrayBuffer): any
    Description: Deserializes an ArrayBuffer back into a JavaScript value using Bun's internal JSC deserialization.
    Parameters:
      buffer: ArrayBuffer - The buffer to deserialize.
    Returns: any - The deserialized value.
  estimateShallowMemoryUsageOf(value: any): number
    Description: Estimates the shallow memory usage of a JavaScript value in bytes.
    Parameters:
      value: any - The value to estimate.
    Returns: number - The estimated memory usage in bytes.
```

----------------------------------------

TITLE: Stream a File with Bun.serve
DESCRIPTION: This example illustrates how to stream a file efficiently using Bun.js. By returning a `Response` object with a `BunFile` instance as its body, Bun leverages `sendfile(2)` for zero-copy file transfers.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: TypeScript
CODE:
```
Bun.serve({
  fetch(req) {
    return new Response(Bun.file("./hello.txt"));
  },
});
```

----------------------------------------

TITLE: Execute a TypeScript File with Bun
DESCRIPTION: This shell command runs the `index.ts` file using the Bun runtime, starting the HTTP server defined within it.
SOURCE: https://bun.sh/docs/quickstart

LANGUAGE: Shell
CODE:
```
bun index.ts
```

----------------------------------------

TITLE: Basic ES Module Import and Export in Bun
DESCRIPTION: Demonstrates a simple ES module import and export setup in Bun, where 'index.ts' imports and calls a function from 'hello.ts'. This illustrates the fundamental way modules interact.
SOURCE: https://bun.sh/docs/runtime/modules

LANGUAGE: typescript
CODE:
```
import { hello } from "./hello";

hello();
```

LANGUAGE: typescript
CODE:
```
export function hello() {
  console.log("Hello world!");
}
```

----------------------------------------

TITLE: Implement IP-based Rate Limiting with Bun Redis Client (TypeScript)
DESCRIPTION: Shows how to implement a basic IP-based rate limiting system using Redis. It increments a counter for each IP and sets an expiration for the window, returning whether the limit has been exceeded and the remaining requests.
SOURCE: https://bun.sh/docs/api/redis

LANGUAGE: ts
CODE:
```
async function rateLimit(ip, limit = 100, windowSecs = 3600) {
  const key = `ratelimit:${ip}`;

  // Increment counter
  const count = await redis.incr(key);

  // Set expiry if this is the first request in window
  if (count === 1) {
    await redis.expire(key, windowSecs);
  }

  // Check if limit exceeded
  return {
    limited: count > limit,
    remaining: Math.max(0, limit - count),
  };
}
```

----------------------------------------

TITLE: Install Bun on Windows via PowerShell
DESCRIPTION: This command downloads and executes the Bun installation script for Windows, installing Bun v1.1 or later. Bun is required to run its own code generators during the build process.
SOURCE: https://bun.sh/docs/project/building-windows

LANGUAGE: ps1
CODE:
```
irm bun.sh/install.ps1 | iex
```

----------------------------------------

TITLE: Sending Basic HTTP/HTTPS GET Requests with Bun's fetch
DESCRIPTION: Demonstrates how to perform simple GET requests using the `fetch` API in Bun for both HTTP and HTTPS URLs. It shows how to retrieve the response status and body as text, JSON, or other formats.
SOURCE: https://bun.sh/docs/api/fetch

LANGUAGE: JavaScript
CODE:
```
const response = await fetch("http://example.com");

console.log(response.status); // => 200

const text = await response.text(); // or response.json(), response.formData(), etc.
```

LANGUAGE: JavaScript
CODE:
```
const response = await fetch("https://example.com");
```

----------------------------------------

TITLE: Bun Ecosystem Overview: CLI Commands and APIs
DESCRIPTION: A comprehensive list of core CLI commands, runtime features, bundler capabilities, test runner functionalities, and available APIs within the Bun ecosystem. This includes package management, build tools, testing utilities, and various runtime APIs for networking, file I/O, and more.
SOURCE: https://bun.sh/docs/api/spawn

LANGUAGE: APIDOC
CODE:
```
CLI Commands:
  - bun run: Run scripts
  - bun install: Install dependencies
  - bun add: Add dependencies
  - bun remove: Remove dependencies
  - bun update: Update dependencies
  - bun publish: Publish packages
  - bun outdated: Check for outdated dependencies
  - bun link: Link packages
  - bun pm: Package manager utilities
  - bun test: Run tests
  - bunx: Execute packages

Runtime Features:
  - File types (loaders)
  - TypeScript support
  - JSX support
  - Environment variables
  - Bun APIs
  - Web APIs
  - Node.js compatibility
  - Single-file executable
  - Plugins
  - Watch mode
  - Module resolution
  - Auto-install
  - bunfig.toml configuration
  - Debugger
  - $ Shell (Bun.spawn)

Bundler:
  - Bun.build: Build projects
  - HTML & static sites support
  - CSS support
  - Fullstack Dev Server
  - Hot reloading (HMR)
  - Loaders
  - Plugins
  - Macros
  - Comparison with esbuild

Test Runner:
  - Writing tests
  - Watch mode
  - Lifecycle hooks
  - Mocks
  - Snapshots
  - Dates and times utilities
  - Code coverage
  - Test reporters
  - Test configuration
  - Runtime behavior
  - Finding tests
  - DOM testing

Core APIs:
  - HTTP server
  - HTTP client (fetch)
  - WebSockets
  - Workers
  - Binary data handling
  - Streams
  - SQL database access
  - S3 Object Storage
  - File I/O
  - Redis client
  - import.meta
  - SQLite
  - FileSystemRouter
  - TCP sockets
  - UDP sockets
  - Globals
  - Child processes (Bun.spawn, Bun.spawnSync)

Utility APIs:
  - HTMLRewriter
  - Hashing
  - Console
  - Cookie
  - FFI (Foreign Function Interface)
  - C Compiler
  - Utils
  - Node-API
  - Glob pattern matching
  - DNS resolution
  - Semver (Semantic Versioning)
  - Color utilities
  - Transpiler
```

----------------------------------------

TITLE: Bun SQL: Selecting Data with Tagged Template Literals
DESCRIPTION: This snippet demonstrates how to perform basic SELECT queries using Bun's `sql` tagged template literal. It shows filtering by a single condition and combining multiple conditions, with automatic parameter escaping for safety.
SOURCE: https://bun.sh/docs/api/sql

LANGUAGE: JavaScript
CODE:
```
import { sql } from "bun";

const users = await sql`
  SELECT * FROM users
  WHERE active = ${true}
  LIMIT ${10}
`;

// Select with multiple conditions
const activeUsers = await sql`
  SELECT *
  FROM users
  WHERE active = ${true}
  AND age >= ${18}
`;
```

----------------------------------------

TITLE: Running a script in all packages using --filter
DESCRIPTION: Demonstrates how to execute a `dev` script simultaneously in all packages within a monorepo using `bun` with the `--filter '*'` flag, simplifying the development workflow.
SOURCE: https://bun.sh/docs/cli/filter

LANGUAGE: Shell
CODE:
```
bun --filter '*' dev
```

----------------------------------------

TITLE: Bun Test: Create and Use Mock Functions
DESCRIPTION: Demonstrates how to create a mock function using `mock` from `bun:test` and assert its behavior, including call count and return values, ensuring the function was called as expected.
SOURCE: https://bun.sh/docs/cli/test

LANGUAGE: TypeScript
CODE:
```
import { test, expect, mock } from "bun:test";
const random = mock(() => Math.random());

test("random", () => {
  const val = random();
  expect(val).toBeGreaterThan(0);
  expect(random).toHaveBeenCalled();
  expect(random).toHaveBeenCalledTimes(1);
});
```

----------------------------------------

TITLE: Optimize Bun App for Production Deployment
DESCRIPTION: Compiles a Bun application for production environments, applying minification to reduce the executable size and embedding a compressed sourcemap. This shifts parsing and transpilation costs from runtime to build-time, improving application startup performance and enabling better debugging of errors.
SOURCE: https://bun.sh/docs/bundler/executables

LANGUAGE: Shell
CODE:
```
bun build --compile --minify --sourcemap ./path/to/my/app.ts --outfile myapp
```

----------------------------------------

TITLE: Bun CLI: Project Initialization and Creation
DESCRIPTION: Commands for initializing new Bun projects with default configurations and creating projects from predefined templates or boilerplates.
SOURCE: https://bun.sh/docs/cli/test

LANGUAGE: CLI
CODE:
```
bun init
```

LANGUAGE: CLI
CODE:
```
bun create
```

----------------------------------------

TITLE: Bun.serve() Route with Async/Await
DESCRIPTION: This example illustrates how to use `async/await` within `Bun.serve()` route handlers. It demonstrates fetching data asynchronously, such as a database version using `bun:sql`, and returning a JSON response, showcasing modern asynchronous programming patterns.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: JavaScript
CODE:
```
import { sql, serve } from "bun";

serve({
  port: 3001,
  routes: {
    "/api/version": async () => {
      const [version] = await sql`SELECT version()`;
      return Response.json(version);
    }
  }
});
```

----------------------------------------

TITLE: Bun.serve HTTP Server Example
DESCRIPTION: Demonstrates how to start a basic HTTP server using Bun.serve to handle incoming requests and return a simple response. This is Bun's native way to create an HTTP server.
SOURCE: https://bun.sh/docs/runtime/bun-apis

LANGUAGE: ts
CODE:
```
Bun.serve({
  fetch(req: Request) {
    return new Response("Success!");
  },
});
```

----------------------------------------

TITLE: Initialize Bun Project
DESCRIPTION: This command initializes a new Bun project in the current directory. When executed, it automatically generates a `tsconfig.json` file with the recommended `compilerOptions` tailored for Bun development, simplifying project setup.
SOURCE: https://bun.sh/docs/runtime/typescript

LANGUAGE: sh
CODE:
```
$ bun init
```

----------------------------------------

TITLE: Reading and Streaming Response Bodies with Bun's fetch
DESCRIPTION: Documents various methods available on the `Response` object for reading the response body, including `text()`, `json()`, and `formData()`. It also illustrates how to stream large response bodies using async iterators or by directly accessing the `ReadableStream`.
SOURCE: https://bun.sh/docs/api/fetch

LANGUAGE: APIDOC
CODE:
```
Response Body Methods:
- response.text(): Promise<string>
  Returns a promise that resolves with the response body as a string.
- response.json(): Promise<any>
  Returns a promise that resolves with the response body as a JSON object.
- response.formData(): Promise<FormData>
  Returns a promise that resolves with the response body as a FormData object.
- response.bytes(): Promise<Uint8Array>
  Returns a promise that resolves with the response body as a Uint8Array.
- response.arrayBuffer(): Promise<ArrayBuffer>
  Returns a promise that resolves with the response body as an ArrayBuffer.
- response.blob(): Promise<Blob>
  Returns a promise that resolves with the response body as a Blob.
```

LANGUAGE: JavaScript
CODE:
```
const response = await fetch("http://example.com");

for await (const chunk of response.body) {
  console.log(chunk);
}
```

LANGUAGE: JavaScript
CODE:
```
const response = await fetch("http://example.com");

const stream = response.body;

const reader = stream.getReader();
const { value, done } = await reader.read();
```

----------------------------------------

TITLE: Create a Simple HTTP Server with Bun.serve
DESCRIPTION: This TypeScript code snippet demonstrates how to set up a basic HTTP server using Bun.serve, listening on port 3000 and returning 'Bun!' as the response. It's the core of a simple web application.
SOURCE: https://bun.sh/docs/quickstart

LANGUAGE: TypeScript
CODE:
```
const server = Bun.serve({
  port: 3000,
  fetch(req) {
    return new Response("Bun!");
  },
});

console.log(`Listening on http://localhost:${server.port} ...`);
```

----------------------------------------

TITLE: Install a package using Bun's package manager
DESCRIPTION: This command illustrates how to install a new package into a project using Bun's built-in package manager. Bun aims to be a faster alternative to existing package managers like npm or yarn.
SOURCE: https://bun.sh/docs/index

LANGUAGE: sh
CODE:
```
bun install <pkg>
```

----------------------------------------

TITLE: Recommended TypeScript Compiler Options for Bun Projects
DESCRIPTION: A set of recommended `compilerOptions` for a Bun project, enabling features like top-level await, JSX, and extensioned `.ts` imports, and avoiding TypeScript compiler warnings. This configuration includes environment setup, bundler mode, and best practices.
SOURCE: https://bun.sh/docs/typescript

LANGUAGE: JSON
CODE:
```
{
  "compilerOptions": {
    // Environment setup & latest features
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "Preserve",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    // Bundler mode
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    // Best practices
    "strict": true,
    "skipLibCheck": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,

    // Some stricter flags (disabled by default)
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noPropertyAccessFromIndexSignature": false
  }
}
```

----------------------------------------

TITLE: Bun Server Global Error Handling
DESCRIPTION: Illustrates Bun's automatic error catching within routes and how to implement a global `error` handler for the `Bun.serve()` instance. This allows for centralized error logging and custom error responses.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: JavaScript
CODE:
```
Bun.serve({
  routes: {
    // Errors are caught automatically
    "/api/risky": () => {
      throw new Error("Something went wrong");
    },
  },
  // Global error handler
  error(error) {
    console.error(error);
    return new Response(`Internal Error: ${error.message}`, {
      status: 500,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  },
});
```

----------------------------------------

TITLE: Setting a Timeout for Fetch Requests in Bun
DESCRIPTION: Explains how to set a timeout for an HTTP request using `AbortSignal.timeout`. This ensures that the request will be automatically canceled if it doesn't complete within the specified duration.
SOURCE: https://bun.sh/docs/api/fetch

LANGUAGE: JavaScript
CODE:
```
const response = await fetch("http://example.com", {
  signal: AbortSignal.timeout(1000),
});
```

----------------------------------------

TITLE: Perform basic S3 operations with Bun's native API
DESCRIPTION: Demonstrates fundamental S3 operations in Bun, including reading environment variables for credentials, downloading JSON data, uploading new content, presigning URLs for temporary access, and deleting files. The API is designed to be intuitive and similar to fetch's Response and Blob APIs.
SOURCE: https://bun.sh/docs/api/s3

LANGUAGE: TypeScript
CODE:
```
import { s3, write, S3Client } from "bun";

// Bun.s3 reads environment variables for credentials
// file() returns a lazy reference to a file on S3
const metadata = s3.file("123.json");

// Download from S3 as JSON
const data = await metadata.json();

// Upload to S3
await write(metadata, JSON.stringify({ name: "John", age: 30 }));

// Presign a URL (synchronous - no network request needed)
const url = metadata.presign({
  acl: "public-read",
  expiresIn: 60 * 60 * 24 // 1 day
});

// Delete the file
await metadata.delete();
```

----------------------------------------

TITLE: Execute a script defined in package.json with Bun
DESCRIPTION: This command shows how to run a script defined in the 'scripts' section of a 'package.json' file. Bun's 'run' command acts as a script runner, similar to 'npm run' or 'yarn run'.
SOURCE: https://bun.sh/docs/index

LANGUAGE: sh
CODE:
```
bun run start
```

----------------------------------------

TITLE: Correct and Incorrect HMR API Usage in Bun
DESCRIPTION: Shows common pitfalls and correct patterns for using Bun's `import.meta.hot` API. Direct calls to `import.meta.hot.<API>` are required for dead-code elimination to work, while assigning `hot` or `import.meta` to variables, or passing methods as callbacks, will prevent it.
SOURCE: https://bun.sh/docs/bundler/hmr

LANGUAGE: TypeScript
CODE:
```
// INVALID: Assigning `hot` to a variable
const hot = import.meta.hot;
hot.accept();

// INVALID: Assigning `import.meta` to a variable
const meta = import.meta;
meta.hot.accept();
console.log(meta.hot.data);

// INVALID: Passing to a function
doSomething(import.meta.hot.dispose);

// OK: The full phrase "import.meta.hot.<API>" must be called directly:
import.meta.hot.accept();

// OK: `data` can be passed to functions:
doSomething(import.meta.hot.data);
```

----------------------------------------

TITLE: Programmatically Set Environment Variable in JavaScript
DESCRIPTION: Explains how to set an environment variable 'FOO' directly within a JavaScript or TypeScript application by assigning a value to `process.env.FOO`. This method is suitable for runtime configuration.
SOURCE: https://bun.sh/docs/runtime/env

LANGUAGE: JavaScript
CODE:
```
process.env.FOO = "hello";
```

----------------------------------------

TITLE: Scaffold a Basic Bun Project Interactively
DESCRIPTION: Demonstrates the interactive `bun init` command, which guides users through creating a new Bun project by prompting for package name and entry point. It generates essential files like `package.json`, `index.ts`, `.gitignore`, `tsconfig.json`, and `README.md`. Users can press enter to accept defaults or use the `-y` flag for auto-acceptance.
SOURCE: https://bun.sh/docs/cli/init

LANGUAGE: bash
CODE:
```
$ bun init
bun init helps you get started with a minimal project and tries to
guess sensible defaults. Press ^C anytime to quit.

package name (quickstart):
entry point (index.ts):

Done! A package.json file was saved in the current directory.
 + index.ts
 + .gitignore
 + tsconfig.json (for editor auto-complete)
 + README.md

To get started, run:
  bun run index.ts
```

----------------------------------------

TITLE: Define a simple Bun test
DESCRIPTION: Illustrates how to define a basic test using `bun:test` with `expect` and `test` functions. This is the fundamental structure for writing tests in Bun.
SOURCE: https://bun.sh/docs/test/writing

LANGUAGE: TypeScript
CODE:
```
import { expect, test } from "bun:test";

test("2 + 2", () => {
  expect(2 + 2).toBe(4);
});
```

----------------------------------------

TITLE: Bun SQL: Safely Using Dynamic Table Names
DESCRIPTION: This snippet demonstrates how to safely include dynamic table or schema names in SQL queries using Bun's `sql()` helper. This method ensures proper escaping, preventing SQL injection vulnerabilities when constructing queries at runtime.
SOURCE: https://bun.sh/docs/api/sql

LANGUAGE: JavaScript
CODE:
```
// Safely reference tables dynamically
await sql`SELECT * FROM ${sql("users")}`;

// With schema qualification
await sql`SELECT * FROM ${sql("public.users")}`;
```

----------------------------------------

TITLE: Handle Basic HTTP Requests with Bun.serve
DESCRIPTION: Demonstrates a basic `fetch` handler for `Bun.serve` that routes requests based on URL path, returning different responses for home, blog, and 404 pages.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: Bun
CODE:
```
Bun.serve({
  fetch(req) {
    const url = new URL(req.url);
    if (url.pathname === "/") return new Response("Home page!");
    if (url.pathname === "/blog") return new Response("Blog!");
    return new Response("404!");
  }
});
```

----------------------------------------

TITLE: Run Bun Docker Container
DESCRIPTION: Executes a Bun Docker container with specific resource limits and initialization, removing the container after execution.
SOURCE: https://bun.sh/docs/installation

LANGUAGE: docker
CODE:
```
docker run --rm --init --ulimit memlock=-1:-1 oven/bun
```

----------------------------------------

TITLE: Bundle Entrypoints with Bun's Native Bundler
DESCRIPTION: Demonstrates how to use Bun's high-performance native bundler. This snippet provides examples for both programmatic bundling using the `Bun.build` JavaScript API and command-line bundling via `bun build`, showing how to specify entrypoints and an output directory.
SOURCE: https://bun.sh/docs/bundler

LANGUAGE: JavaScript
CODE:
```
await Bun.build({
  entrypoints: ['./index.tsx'],
  outdir: './build'
});
```

LANGUAGE: CLI
CODE:
```
bun build ./index.tsx --outdir ./build
```

----------------------------------------

TITLE: Initiating Fetch Requests with a Request Object in Bun
DESCRIPTION: Illustrates how to use a `Request` object as an argument to `fetch`, allowing for more structured control over the request's method, body, and other properties. This approach provides flexibility for various HTTP methods.
SOURCE: https://bun.sh/docs/api/fetch

LANGUAGE: JavaScript
CODE:
```
const request = new Request("http://example.com", {
  method: "POST",
  body: "Hello, world!",
});

const response = await fetch(request);
```

----------------------------------------

TITLE: Add Dependencies from npm Registry
DESCRIPTION: Examples demonstrating how to add dependencies from the npm registry using the `bun add` command, including adding the latest version and a specific next version.
SOURCE: https://bun.sh/docs/cli/add

LANGUAGE: Shell
CODE:
```
bun add zod
bun add zod@next
```

----------------------------------------

TITLE: Bun Audit Output: Vulnerabilities Detected and Update Hints
DESCRIPTION: Shows the report generated by `bun audit` when security vulnerabilities are detected. It lists affected packages, severity levels, advisory links, and provides commands for updating dependencies to resolve issues.
SOURCE: https://bun.sh/docs/install/audit

LANGUAGE: Shell
CODE:
```
3 vulnerabilities (1 high, 2 moderate)
To update all dependencies to the latest compatible versions:
  bun update
To update all dependencies to the latest versions (including breaking changes):
  bun update --latest

```

----------------------------------------

TITLE: Create a simple web server with Bun
DESCRIPTION: This TypeScript snippet demonstrates how to set up a basic web server using `Bun.serve`. It defines a fetch handler that logs the incoming request URL to the console and responds with 'Hello, world!'.
SOURCE: https://bun.sh/docs/runtime/debugger

LANGUAGE: ts
CODE:
```
Bun.serve({
  fetch(req){
    console.log(req.url);
    return new Response("Hello, world!");
  }
})
```

----------------------------------------

TITLE: Bun Redis Client Basic Operations
DESCRIPTION: Demonstrates fundamental Redis operations using Bun's client, including setting, getting, incrementing, checking existence, and deleting keys.
SOURCE: https://bun.sh/docs/api/redis

LANGUAGE: ts
CODE:
```
import { redis } from "bun";

// Set a key
await redis.set("greeting", "Hello from Bun!");

// Get a key
const greeting = await redis.get("greeting");
console.log(greeting); // "Hello from Bun!"

// Increment a counter
await redis.set("counter", 0);
await redis.incr("counter");

// Check if a key exists
const exists = await redis.exists("greeting");

// Delete a key
await redis.del("greeting");
```

----------------------------------------

TITLE: Define Environment Variables in .env File
DESCRIPTION: Illustrates the basic syntax for defining environment variables within a .env file, where each variable is set on a new line using the KEY=VALUE format. Bun automatically reads these files based on precedence rules.
SOURCE: https://bun.sh/docs/runtime/env

LANGUAGE: dotenv
CODE:
```
FOO=hello
BAR=world

```

----------------------------------------

TITLE: Bun Redis Client String Operations
DESCRIPTION: Covers common Redis string operations such as setting, getting, deleting, checking existence, setting expiration, and retrieving time-to-live for keys.
SOURCE: https://bun.sh/docs/api/redis

LANGUAGE: ts
CODE:
```
// Set a key
await redis.set("user:1:name", "Alice");

// Get a key
const name = await redis.get("user:1:name");

// Delete a key
await redis.del("user:1:name");

// Check if a key exists
const exists = await redis.exists("user:1:name");

// Set expiration (in seconds)
await redis.set("session:123", "active");
await redis.expire("session:123", 3600); // expires in 1 hour

// Get time to live (in seconds)
const ttl = await redis.ttl("session:123");
```

----------------------------------------

TITLE: Bun Build for Production (API)
DESCRIPTION: Shows how to programmatically configure and run a production build using Bun's `Bun.build` API. It includes options for entry points, output directory, and detailed minification settings.
SOURCE: https://bun.sh/docs/bundler/html

LANGUAGE: TypeScript
CODE:
```
Bun.build({
  entrypoints: ["./index.html"],
  outdir: "./dist",
  minify: {
    whitespace: true,
    identifiers: true,
    syntax: true,
  }
});
```

----------------------------------------

TITLE: Run tests with Bun's built-in test runner
DESCRIPTION: This command executes tests defined in the project using Bun's integrated test runner. Bun provides a fast and compatible testing environment for JavaScript and TypeScript applications.
SOURCE: https://bun.sh/docs/index

LANGUAGE: sh
CODE:
```
bun test
```

----------------------------------------

TITLE: Create Bun Project from React Component
DESCRIPTION: Demonstrates how to use `bun create` to transform an existing React component file (e.g., `.jsx` or `.tsx`) into a complete Bun development environment, including hot reload and production build capabilities.
SOURCE: https://bun.sh/docs/cli/bun-create

LANGUAGE: bash
CODE:
```
$ bun create ./MyComponent.jsx # .tsx also supported
```

----------------------------------------

TITLE: Supported HTTP Methods for Bun.serve Routes
DESCRIPTION: Lists common HTTP methods supported by Bun.serve for route specialization, along with their typical use cases. This table provides a quick reference for designing RESTful API endpoints.
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: APIDOC
CODE:
```
Method | Usecase example
--- | ---
`GET` | Fetch a resource
`HEAD` | Check if a resource exists
`OPTIONS` | Get allowed HTTP methods (CORS)
`DELETE` | Delete a resource
`PATCH` | Update a resource
`POST` | Create a resource
`PUT` | Update a resource
```

----------------------------------------

TITLE: Set Environment Variables via Command Line for Bun
DESCRIPTION: Demonstrates how to set environment variables directly in the command line for different operating systems (Linux/macOS and Windows CMD) before executing a Bun command, making the variables available to the process.
SOURCE: https://bun.sh/docs/runtime/env

LANGUAGE: Shell
CODE:
```
FOO=helloworld bun run dev
```

LANGUAGE: CMD
CODE:
```
set FOO=helloworld && bun run dev
```

----------------------------------------

TITLE: Integrate Bun Tests in GitHub Actions
DESCRIPTION: Example GitHub Actions workflow demonstrating how to set up Bun, install dependencies, and run tests within a CI/CD pipeline. Bun automatically emits GitHub Actions annotations.
SOURCE: https://bun.sh/docs/cli/test

LANGUAGE: YAML
CODE:
```
jobs:
  build:
    name: build-app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install dependencies # (assuming your project has dependencies)
        run: bun install # You can use npm/yarn/pnpm instead if you prefer
      - name: Run tests
        run: bun test
```

----------------------------------------

TITLE: Handle Asynchronous Requests with Bun.serve using Async/Await
DESCRIPTION: Shows how to use `async/await` within the `fetch` handler to perform asynchronous operations, such as sleeping for a duration, and then returning a response. It imports `sleep` and `serve` from "bun".
SOURCE: https://bun.sh/docs/api/http

LANGUAGE: Bun
CODE:
```
import { sleep, serve } from "bun";
serve({
  async fetch(req) {
    const start = performance.now();
    await sleep(10);
    const end = performance.now();
    return new Response(`Slept for ${end - start}ms`);
  }
});
```

----------------------------------------

TITLE: Bun HTTP Server Hot Reload Example
DESCRIPTION: This code snippet demonstrates a basic Bun HTTP server that leverages the hot reloading functionality. It includes a global counter to illustrate that the server process remains active and only the code is reloaded when changes are made, rather than the entire server restarting.
SOURCE: https://bun.sh/docs/runtime/hot

LANGUAGE: TypeScript
CODE:
```
globalThis.count ??= 0;
globalThis.count++;

Bun.serve({
  fetch(req: Request) {
    return new Response(`Reloaded ${globalThis.count} times`);
  },
  port: 3000,
});
```

----------------------------------------

TITLE: Tracking and Reporting Unused Exports with onLoad and .defer()
DESCRIPTION: Shows an advanced `onLoad` plugin that uses the `.defer()` function to wait for all other modules to be loaded before generating a `stats.json` file. This example demonstrates scanning imports and collecting statistics on module usage, useful for build-time analysis.
SOURCE: https://bun.sh/docs/runtime/plugins

LANGUAGE: ts
CODE:
```
import { plugin } from "bun";

plugin({
  name: "track imports",
  setup(build) {
    const transpiler = new Bun.Transpiler();

    let trackedImports: Record<string, number> = {};

    // Each module that goes through this onLoad callback
    // will record its imports in `trackedImports`
    build.onLoad({ filter: /\.ts/ }, async ({ path }) => {
      const contents = await Bun.file(path).arrayBuffer();

      const imports = transpiler.scanImports(contents);

      for (const i of imports) {
        trackedImports[i.path] = (trackedImports[i.path] || 0) + 1;
      }

      return undefined;
    });

    build.onLoad({ filter: /stats\.json/ }, async ({ defer }) => {
      // Wait for all files to be loaded, ensuring
      // that every file goes through the above `onLoad()` function
      // and their imports tracked
      await defer();

      // Emit JSON containing the stats of each import
      return {
        contents: `export default ${JSON.stringify(trackedImports)}`,
        loader: "json",
      };
    });
  },
});
```

----------------------------------------

TITLE: Bun CLI: Examples for Running Files and Scripts
DESCRIPTION: Demonstrates common use cases for the `bun run` command, including executing JavaScript/TypeScript files and package.json scripts.
SOURCE: https://bun.sh/docs/cli/run

LANGUAGE: shell
CODE:
```
bun run ./index.js
```

LANGUAGE: shell
CODE:
```
bun run ./index.tsx
```

LANGUAGE: shell
CODE:
```
bun run dev
```

LANGUAGE: shell
CODE:
```
bun run lint
```

----------------------------------------

TITLE: Run Bun Tests
DESCRIPTION: Executes all tests in the current project using the Bun test runner. Tests are written in JavaScript or TypeScript with a Jest-like API.
SOURCE: https://bun.sh/docs/cli/test

LANGUAGE: Shell
CODE:
```
bun test
```