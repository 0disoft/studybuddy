TITLE: Superforms `superValidate` API
DESCRIPTION: The primary server-side API for Superforms, used to initialize and validate forms. It accepts a validation library adapter and optional configuration, returning a promise that resolves to the validated form state.
SOURCE: https://superforms.rocks/get-started/superstruct

LANGUAGE: APIDOC
CODE:
```
superValidate(
  adapter: SuperformsAdapter,
  options?: { defaults?: Record<string, any> }
): Promise<SuperValidated<Schema>>

Parameters:
  adapter: An adapter for a validation library (e.g., superstruct(schema, { defaults }))
  options: Optional configuration object.
    defaults: An object containing default values for the form fields.

Returns:
  Promise<SuperValidated<Schema>>: A promise that resolves to a SuperValidated object containing the form data, errors, and other state.
```

----------------------------------------

TITLE: Create a New SvelteKit Project
DESCRIPTION: Use this command to scaffold a new SvelteKit application from scratch. This is a prerequisite if you are starting a new project that will utilize Superforms.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: bash
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Populate SvelteKit Form from Database using superValidate
DESCRIPTION: Demonstrates how to fetch data from a database (e.g., user details) and pre-fill a form using `superValidate` within a SvelteKit `load` function. It includes error handling for cases where the data is not found, returning a 404 error.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: typescript
CODE:
```
import { error } from '@sveltejs/kit';

export const load = async ({ params }) => {
  // Replace with your database
  const user = await db.users.findUnique({
    where: { id: params.id }
  });

  if (!user) error(404, 'Not found');

  const form = await superValidate(user, your_adapter(schema));

  // Always return { form } in load functions
  return { form };
};
```

----------------------------------------

TITLE: superValidate Return Object Properties API Documentation
DESCRIPTION: Detailed API documentation for the properties returned by the `superValidate` function. These properties are essential for managing form state, displaying validation results, and applying HTML validation constraints on the client-side.
SOURCE: https://superforms.rocks/get-started/yup

LANGUAGE: APIDOC
CODE:
```
superValidate Return Object:
  id: string - Id for the schema, to handle multiple forms on the same page.
  valid: boolean - Tells whether the validation succeeded or not. Used on the server and in events.
  posted: boolean - Tells if the data was posted (in a form action) or not (in a load function).
  data: object - The posted data, which should be returned to the client using `fail` if not valid.
  errors: object - An object with all validation errors, in a structure reflecting the data.
  message: string (optional) - Can be set as a status message.
  constraints: object - An object with HTML validation constraints, that can be spread on input fields. (Only sent in load function)
  shape: object - Used internally in error handling. (Only sent in load function)
```

----------------------------------------

TITLE: Superforms Superstruct Adapter API
DESCRIPTION: An adapter function for integrating Superstruct validation schemas with Superforms. It takes a Superstruct schema and optional default values, returning an adapter instance compatible with `superValidate`.
SOURCE: https://superforms.rocks/get-started/superstruct

LANGUAGE: APIDOC
CODE:
```
superstruct(
  schema: SuperstructSchema,
  options?: { defaults?: Record<string, any> }
): SuperformsAdapter

Parameters:
  schema: The Superstruct schema object defining the form's data structure.
  options: Optional configuration object.
    defaults: An object containing default values for the form fields.

Returns:
  SuperformsAdapter: An adapter instance compatible with superValidate.
```

----------------------------------------

TITLE: superValidate Return Object Properties API Documentation
DESCRIPTION: This section provides detailed documentation for the properties of the object returned by `superValidate`. It explains the purpose of each property, including `id`, `valid`, `posted`, `data`, `errors`, and `message` for managing form state, as well as `constraints` and `shape` for client-side validation and internal use.
SOURCE: https://superforms.rocks/get-started/effect

LANGUAGE: APIDOC
CODE:
```
superValidate Return Object Properties:
  id: string
    Purpose: Id for the schema, to handle multiple forms on the same page.
  valid: boolean
    Purpose: Tells you whether the validation succeeded or not. Used on the server and in events.
  posted: boolean
    Purpose: Tells you if the data was posted (in a form action) or not (in a load function).
  data: object
    Purpose: The posted data, which should be returned to the client using fail if not valid.
  errors: object
    Purpose: An object with all validation errors, in a structure reflecting the data.
  message: string (optional)
    Purpose: Can be set as a status message.

Additional Properties (only in load function):
  constraints: object
    Purpose: An object with HTML validation constraints, that can be spread on input fields.
  shape: object
    Purpose: Used internally in error handling.
```

----------------------------------------

TITLE: Handle SvelteKit Form Submissions with superValidate in Server Actions
DESCRIPTION: Illustrates how to process `FormData` from a client-side form submission using `superValidate` within a SvelteKit server action (`+page.server.ts`). It shows how to validate the form, handle invalid submissions with `fail`, and return success messages using `sveltekit-superforms`.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: typescript
CODE:
```
import { message } from 'sveltekit-superforms';
import { fail } from '@sveltejs/kit';

export const actions = {
  default: async ({ request }) => {
    // The adapter must be defined before superValidate for JSON Schema.
    const adapter = schemasafe(schema);
    const form = await superValidate(request, adapter);

    console.log(form);

    if (!form.valid) {
      // Return { form } and things will just work.
      return fail(400, { form });
    }

    // TODO: Do something with the validated form.data

    // Return the form with a status message
    return message(form, 'Form posted successfully!');
  }
};
```

----------------------------------------

TITLE: Display and Bind SvelteKit Form Data on Client with superForm
DESCRIPTION: Explains how to display a form on the client-side (`+page.svelte`) using the `superForm` function from `sveltekit-superforms`. It demonstrates two-way data binding for input fields using `bind:value` and emphasizes the necessity of the `name` attribute for inputs.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import { superForm } from 'sveltekit-superforms';

  let { data } = $props();

  // Client API:
  const { form } = superForm(data.form);
</script>

<form method="POST">
  <label for="name">Name</label>
  <input type="text" name="name" bind:value={$form.name} />

  <label for="email">E-mail</label>
  <input type="email" name="email" bind:value={$form.email} />

  <div><button>Submit</button></div>
</form>
```

----------------------------------------

TITLE: Create a new SvelteKit project
DESCRIPTION: Initializes a new SvelteKit project from scratch using the SvelteKit CLI, providing a clean environment to start with Superforms.
SOURCE: https://superforms.rocks/get-started/superstruct

LANGUAGE: bash
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Create a new SvelteKit application
DESCRIPTION: Use this command to scaffold a fresh SvelteKit project, which will serve as the foundation for integrating Superforms.
SOURCE: https://superforms.rocks/get-started/@vinejs/vine

LANGUAGE: Shell
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: SvelteKit: Debugging Forms with SuperDebug
DESCRIPTION: This snippet demonstrates how to integrate the SuperDebug component into a SvelteKit page to visualize form data and status. It helps in inspecting the form's state during development by displaying its current values and properties.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: Svelte
CODE:
```
<script lang="ts">
  import SuperDebug from 'sveltekit-superforms';
</script>

<SuperDebug data={$form} />
```

----------------------------------------

TITLE: intProxy Function API and Usage Example
DESCRIPTION: Explains the `intProxy` function, which creates a string store for an integer field in the schema, primarily for specific use cases as Svelte often handles numeric inputs automatically. It includes a usage example and details the available options for managing empty states and initial zero values.
SOURCE: https://superforms.rocks/api

LANGUAGE: TypeScript
CODE:
```
import { superForm, intProxy } from 'sveltekit-superforms';
let { data } = $props();

const { form } = superForm(data.form);
const proxy = intProxy(form, 'field', { options });
```

LANGUAGE: APIDOC
CODE:
```
intProxy(form, fieldName, options?):
  form: SuperForm object
  fieldName: string (name of the field)
  options?: {
    empty?: 'null' | 'undefined' | 'zero';
    initiallyEmptyIfZero?: boolean;
    taint?: boolean | 'untaint' | 'untaint-form';
  }
Returns: Writable<string>
```

----------------------------------------

TITLE: Create a New SvelteKit Project
DESCRIPTION: Initializes a new SvelteKit project named 'my-app' using the SvelteKit CLI. This command provides a fresh starting point for integrating Superforms.
SOURCE: https://superforms.rocks/get-started/json-schema

LANGUAGE: Shell
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Handle SvelteKit Form Submission with superValidate Actions
DESCRIPTION: This example illustrates how to process form submissions on the server-side using `superValidate` within SvelteKit's `actions`. It shows how to retrieve `FormData` from the request, validate it against a schema, log the form state, and return appropriate responses using `fail` for errors or `message` for success.
SOURCE: https://superforms.rocks/get-started/json-schema

LANGUAGE: TypeScript
CODE:
```
import { message } from 'sveltekit-superforms';
import { fail } from '@sveltejs/kit';

export const actions = {
  default: async ({ request }) => {
    // The adapter must be defined before superValidate for JSON Schema.
    const adapter = schemasafe(schema);
    const form = await superValidate(request, adapter);

    console.log(form);

    if (!form.valid) {
      // Return { form } and things will just work.
      return fail(400, { form });
    }

    // TODO: Do something with the validated form.data

    // Return the form with a status message
    return message(form, 'Form posted successfully!');
  }
};
```

----------------------------------------

TITLE: Server-side superValidate Return Object Example
DESCRIPTION: This JSON object represents an example of the validation result returned by `superValidate` on the server after a form submission. It indicates the form's validity, whether it was posted, the submitted data, and any validation errors.
SOURCE: https://superforms.rocks/get-started/superstruct

LANGUAGE: JSON
CODE:
```
{
  "id": "a3g9kke",
  "valid": false,
  "posted": true,
  "data": { "name": "Hello world!", "email": "" },
  "errors": { "email": [ "Invalid email" ] }
}
```

----------------------------------------

TITLE: Configure Vite for Client-side JSON Schema Validation
DESCRIPTION: To enable client-side validation with JSON Schema, modify your 'vite.config.ts' file. This configuration ensures that '@exodus/schemasafe' is properly optimized and included in the client-side bundle.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: typescript
CODE:
```
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';

export default defineConfig({
  plugins: [sveltekit()],
  optimizeDeps: {
    include: ['@exodus/schemasafe'] // Add this to make client-side validation work
  }
});
```

----------------------------------------

TITLE: Debug SvelteKit Superforms with SuperDebug Component
DESCRIPTION: This example shows how to integrate the SuperDebug component into a Svelte page to visualize and debug the state of a Superform. It allows real-time inspection of form data as it changes.
SOURCE: https://superforms.rocks/get-started/@vinejs/vine

LANGUAGE: Svelte
CODE:
```
<script lang="ts">
  import SuperDebug from 'sveltekit-superforms';
</script>

<SuperDebug data={$form} />
```

----------------------------------------

TITLE: Superforms Validation Adapter Usage with Zod
DESCRIPTION: Illustrates the use of `ValidationAdapter` and `ClientValidationAdapter` to wrap a validation schema, demonstrating how to integrate with a library like Zod. This example shows type inference for the adapter, ensuring type safety.
SOURCE: https://superforms.rocks/api

LANGUAGE: typescript
CODE:
```
import type { Infer, InferIn } from 'sveltekit-superforms';
import { zod, zodClient } from 'sveltekit-superforms/adapters';
import { z } from 'zod';

const schema = z.object({
  name: z.string().min(3)
})

// Type is now ValidationAdapter<Infer<typeof schema>, InferIn<typeof schema>>
// Which is the same as ValidationAdapter<{name: string}, {name: string}>
const adapter = zod(schema);
```

----------------------------------------

TITLE: Install SvelteKit Superforms and Schemasafe
DESCRIPTION: This command installs the 'sveltekit-superforms' library and '@exodus/schemasafe' as development dependencies, which are essential for using Superforms with JSON Schema validation.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: bash
CODE:
```
npm i -D sveltekit-superforms @exodus/schemasafe
```

----------------------------------------

TITLE: Enable Progressive Enhancement with superForm's enhance
DESCRIPTION: This snippet demonstrates how to integrate progressive enhancement into a SvelteKit form using the `enhance` function returned by `superForm`. It prevents full page reloads on submission and unlocks client-side features like validation, events, and error handling.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: typescript
CODE:
```
const { form, errors, constraints, message, enhance } = superForm(data.form);
```

LANGUAGE: html
CODE:
```
<form method="POST" use:enhance>
```

----------------------------------------

TITLE: Importing SvelteKit Superforms Client API
DESCRIPTION: Shows the necessary imports for using the `superForm` and `defaults` functions from the `sveltekit-superforms` client API.
SOURCE: https://superforms.rocks/api

LANGUAGE: TypeScript
CODE:
```
import {
  superForm,
  defaults
} from 'sveltekit-superforms';
```

----------------------------------------

TITLE: Create a new SvelteKit project
DESCRIPTION: Initializes a new SvelteKit project named 'my-app' using the SvelteKit CLI.
SOURCE: https://superforms.rocks/get-started/effect

LANGUAGE: bash
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Create a new SvelteKit project
DESCRIPTION: This command initializes a new SvelteKit project in a directory named 'my-app'. It's a standard way to start a fresh SvelteKit application, which serves as the foundation for integrating Superforms.
SOURCE: https://superforms.rocks/get-started/joi

LANGUAGE: Shell
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Superforms Server Error Normalization Types
DESCRIPTION: This API documentation outlines the different types of server errors that Superforms normalizes for consistent handling. It includes examples for expected errors, exceptions, JSON responses, and other HTTP responses.
SOURCE: https://superforms.rocks/concepts/error-handling

LANGUAGE: APIDOC
CODE:
```
Server Error Normalization:
  Expected error:
    Example: error(404, { code: 'user_not_found', message: 'Not found' })
  Exception:
    Example: throw new Error("Database connection error")
  JSON response:
    Example: return json({ code: 'rate_limited', status: 429 }, { status: 429 })
  Other response:
    Example: <!doctype html><html lang="en"><head><meta charset=...
```

----------------------------------------

TITLE: Initialize Superform in SvelteKit Server Load Function
DESCRIPTION: This example shows how to initialize a Superform within a SvelteKit server load function ('+page.server.ts'). It imports 'superValidate' and the 'schemasafe' adapter, then uses them to create a form object that can be passed to the client. The schema must be defined outside the load function for caching.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: typescript
CODE:
```
import { superValidate, type JSONSchema } from 'sveltekit-superforms';
import { schemasafe } from 'sveltekit-superforms/adapters';

export const schema = {
  type: 'object',
  properties: {
    name: { type: 'string', minLength: 2, default: 'Hello world!' },
    email: { type: 'string', format: 'email' }
  },
  required: ['name', 'email'],
  additionalProperties: false,
  $schema: 'http://json-schema.org/draft-07/schema#'
} as const satisfies JSONSchema;

export const load = async () => {
  // The adapter must be defined before superValidate for JSON Schema.
  const adapter = schemasafe(schema);
  const form = await superValidate(request, adapter);

  // Always return { form } in load functions
  return { form };
};
```

----------------------------------------

TITLE: Create a New SvelteKit Project
DESCRIPTION: Initializes a new SvelteKit project named 'my-app' using the SvelteKit CLI, providing a fresh environment for Superforms integration.
SOURCE: https://superforms.rocks/get-started/class-validator

LANGUAGE: bash
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Install SvelteKit Superforms and Yup Libraries
DESCRIPTION: Installs the SvelteKit Superforms library and the Yup validation library as development dependencies using npm.
SOURCE: https://superforms.rocks/get-started/yup

LANGUAGE: shell
CODE:
```
npm i -D sveltekit-superforms yup
```

----------------------------------------

TITLE: superForm Function Signature
DESCRIPTION: API documentation for the `superForm` function, detailing its parameters (`form`, `options`) and return type (`SuperForm<T, M>`).
SOURCE: https://superforms.rocks/api

LANGUAGE: APIDOC
CODE:
```
superForm<T, M = any>(
  form: SuperValidated<T, M, In> | null | undefined,
  options?: FormOptions<T, M, In>
) : SuperForm<T, M>
```

----------------------------------------

TITLE: Install SvelteKit Superforms and Vine.js
DESCRIPTION: This command installs the `sveltekit-superforms` library and the `@vinejs/vine` validation library as development dependencies in your SvelteKit project.
SOURCE: https://superforms.rocks/get-started/@vinejs/vine

LANGUAGE: Shell
CODE:
```
npm i -D sveltekit-superforms @vinejs/vine
```

----------------------------------------

TITLE: Debug SvelteKit Forms with SuperDebug Component
DESCRIPTION: This example shows how to integrate the `SuperDebug` component from `sveltekit-superforms` into a Svelte component. It allows real-time visualization and inspection of the form's state (`$form` store), aiding in debugging and understanding data flow.
SOURCE: https://superforms.rocks/get-started/superstruct

LANGUAGE: Svelte
CODE:
```
<script lang="ts">
  import SuperDebug from 'sveltekit-superforms';
</script>

<SuperDebug data={$form} />
```

----------------------------------------

TITLE: Install Superforms and SchemaSafe
DESCRIPTION: Installs the 'sveltekit-superforms' library and '@exodus/schemasafe' as development dependencies. SchemaSafe is required for client-side JSON Schema validation.
SOURCE: https://superforms.rocks/get-started/json-schema

LANGUAGE: Shell
CODE:
```
npm i -D sveltekit-superforms @exodus/schemasafe
```

----------------------------------------

TITLE: Install Superforms and Effect-TS
DESCRIPTION: Installs the sveltekit-superforms library and the Effect-TS schema library as development dependencies using npm.
SOURCE: https://superforms.rocks/get-started/effect

LANGUAGE: bash
CODE:
```
npm i -D sveltekit-superforms effect
```

----------------------------------------

TITLE: Handle SvelteKit Form Submissions with superValidate Actions
DESCRIPTION: This example illustrates how to process form submissions within SvelteKit server actions (`+page.server.ts`). It shows how to use `superValidate` with the `request` object to validate incoming `FormData`, handle validation failures with `fail`, and return success messages using `sveltekit-superforms/message`.
SOURCE: https://superforms.rocks/get-started/joi

LANGUAGE: Svelte/TypeScript
CODE:
```
import { message } from 'sveltekit-superforms';
import { fail } from '@sveltejs/kit';

export const actions = {
  default: async ({ request }) => {
    const form = await superValidate(request, your_adapter(schema));
    console.log(form);

    if (!form.valid) {
      // Return { form } and things will just work.
      return fail(400, { form });
    }

    // TODO: Do something with the validated form.data

    // Return the form with a status message
    return message(form, 'Form posted successfully!');
  }
};
```

----------------------------------------

TITLE: Superforms Server API Imports
DESCRIPTION: Lists the core functions and utilities available for server-side operations in Superforms. These imports provide essential tools for form validation, result handling, and error management within server actions.
SOURCE: https://superforms.rocks/api

LANGUAGE: typescript
CODE:
```
import {
  superValidate,
  actionResult,
  defaultValues,
  message,
  setError,
  fail,
  withFiles
} from 'sveltekit-superforms';
```

----------------------------------------

TITLE: APIDOC: SuperValidate Return Object Structure
DESCRIPTION: This section documents the structure of the validation object returned by `superValidate` on the server. It details properties like `id`, `valid`, `posted`, `data`, `errors`, and optional properties such as `message`, `constraints`, and `shape`, which are crucial for client-side form updates and error handling.
SOURCE: https://superforms.rocks/get-started

LANGUAGE: APIDOC
CODE:
```
superValidate Return Object Structure:

Properties:
- id: string (Id for the schema, to handle multiple forms on the same page.)
- valid: boolean (Tells you whether the validation succeeded or not. Used on the server and in events.)
- posted: boolean (Tells you if the data was posted (in a form action) or not (in a load function).)
- data: object (The posted data, which should be returned to the client using `fail` if not valid.)
- errors: object (An object with all validation errors, in a structure reflecting the data.)
- message: string (optional) (Can be set as a status message.)
- constraints: object (An object with HTML validation constraints, that can be spread on input fields.)
- shape: object (Used internally in error handling.)

Example JSON:
{
  "id": "a3g9kke",
  "valid": false,
  "posted": true,
  "data": { "name": "Hello world!", "email": "" },
  "errors": { "email": [ "Invalid email" ] }
}
```

----------------------------------------

TITLE: Importing Superforms Proxy Objects
DESCRIPTION: Illustrates how to import various proxy objects from `sveltekit-superforms`. These proxies enable bi-directional updates and data transformation for corresponding form fields, ensuring changes are reflected across both the proxy and the underlying data.
SOURCE: https://superforms.rocks/api

LANGUAGE: TypeScript
CODE:
```
import {
  // The primitives return a Writable<string>:
  booleanProxy,
  dateProxy,
  intProxy,
  numberProxy,
  stringProxy,
  // File proxies
  fileProxy,
  fileFieldProxy, // formFieldProxy
  // File[] proxies
  filesProxy,
  filesFieldProxy, // arrayProxy
  // The type of the others depends on the field:
  formFieldProxy,
  arrayProxy,
  fieldProxy
} from 'sveltekit-superforms';
```

----------------------------------------

TITLE: Create a new SvelteKit project
DESCRIPTION: Command to scaffold a fresh SvelteKit application using `npx sv create`. This is useful if starting a new project from scratch to integrate Superforms.
SOURCE: https://superforms.rocks/get-started/valibot

LANGUAGE: Shell
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Create a new SvelteKit project
DESCRIPTION: Use this command to scaffold a new SvelteKit application. This is the starting point if you're building a new project from scratch and need a SvelteKit environment.
SOURCE: https://superforms.rocks/get-started/@sinclair/typebox

LANGUAGE: shell
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: defaultValues Function for Schema Defaults
DESCRIPTION: Documents the `defaultValues` function, which retrieves the default values for a given schema, either from Superforms defaults or user-defined schema defaults. The example shows how to use it with a Zod schema to get initial form data.
SOURCE: https://superforms.rocks/api

LANGUAGE: APIDOC
CODE:
```
defaultValues(schema): T
```

LANGUAGE: TypeScript
CODE:
```
import { defaultValues } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { z } from 'zod';

const schema = z.object({
  name: z.string().min(2),
  tags: z.string().min(1).array().default(['a', 'b'])
});

// Returns { name: '', tags: ['a', 'b'] }
const defaults = defaultValues(zod(schema));
```

----------------------------------------

TITLE: Create a new SvelteKit project
DESCRIPTION: Use this command to initialize a new SvelteKit project from scratch. This is an alternative to installing Superforms into an existing project.
SOURCE: https://superforms.rocks/get-started/arktype

LANGUAGE: bash
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Debug SvelteKit Superform with SuperDebug Component
DESCRIPTION: This example shows how to integrate the `SuperDebug` component from `sveltekit-superforms` into a Svelte component for easy debugging of form data. It allows real-time inspection of the form's state as it changes.
SOURCE: https://superforms.rocks/get-started/class-validator

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import SuperDebug from 'sveltekit-superforms';
</script>

<SuperDebug data={$form} />
```

----------------------------------------

TITLE: SuperValidate Return Object Properties
DESCRIPTION: Documentation for the properties of the validation object returned by `superValidate`. It details properties like `id`, `valid`, `posted`, `data`, `errors`, `message`, `constraints`, and `shape`, explaining their purpose and usage.
SOURCE: https://superforms.rocks/get-started/class-validator

LANGUAGE: APIDOC
CODE:
```
Validation Object Properties:
  id: Id for the schema, to handle multiple forms on the same page.
  valid: Tells you whether the validation succeeded or not. Used on the server and in events.
  posted: Tells you if the data was posted (in a form action) or not (in a load function).
  data: The posted data, which should be returned to the client using fail if not valid.
  errors: An object with all validation errors, in a structure reflecting the data.
  message: (optional) Can be set as a status message.
  constraints: An object with HTML validation constraints, that can be spread on input fields.
  shape: Used internally in error handling.
```

----------------------------------------

TITLE: Display SvelteKit Form in Svelte Component
DESCRIPTION: This snippet demonstrates how to display a form in a Svelte component (+page.svelte) using the client-side superForm API. It shows how to initialize the form from data passed by the load function and bind input fields to form data using bind:value.
SOURCE: https://superforms.rocks/get-started/@vinejs/vine

LANGUAGE: Svelte
CODE:
```
<script lang="ts">
  import { superForm } from 'sveltekit-superforms';

  let { data } = $props();

  // Client API:
  const { form } = superForm(data.form);
</script>

<form method="POST">
  <label for="name">Name</label>
  <input type="text" name="name" bind:value={$form.name} />

  <label for="email">E-mail</label>
  <input type="email" name="email" bind:value={$form.email} />

  <div><button>Submit</button></div>
</form>
```

----------------------------------------

TITLE: Create New SvelteKit Project for Superforms CRUD
DESCRIPTION: Commands to initialize a new SvelteKit project, specifically tailored for Superforms CRUD examples. Users can choose between `npx` and `pnpx` for package execution.
SOURCE: https://superforms.rocks/crud

LANGUAGE: shell
CODE:
```
npx sv create sf-crud
```

LANGUAGE: shell
CODE:
```
pnpx sv create sf-crud
```

----------------------------------------

TITLE: Handle SvelteKit Superform Submission in Form Actions
DESCRIPTION: This example shows how to process form submissions in a SvelteKit `+page.server.ts` form action. It uses `superValidate` to handle `FormData` from the request, checks for form validity, and returns appropriate responses using `fail` for errors or `message` for success. It includes a placeholder for server-side data processing.
SOURCE: https://superforms.rocks/get-started/effect

LANGUAGE: TypeScript
CODE:
```
import { message } from 'sveltekit-superforms';
import { fail } from '@sveltejs/kit';

export const actions = {
  default: async ({ request }) => {
    const form = await superValidate(request, your_adapter(schema));
    console.log(form);

    if (!form.valid) {
      // Return { form } and things will just work.
      return fail(400, { form });
    }

    // TODO: Do something with the validated form.data

    // Return the form with a status message
    return message(form, 'Form posted successfully!');
  }
};
```

----------------------------------------

TITLE: Debug SvelteKit Superforms with SuperDebug Component
DESCRIPTION: This code shows how to integrate the `SuperDebug` component from `sveltekit-superforms` into your SvelteKit page. `SuperDebug` provides a visual interface to inspect the current state of your form data, aiding in debugging and development.
SOURCE: https://superforms.rocks/get-started/joi

LANGUAGE: Svelte/TypeScript
CODE:
```
<script lang="ts">
  import SuperDebug from 'sveltekit-superforms';
</script>

<SuperDebug data={$form} />
```

----------------------------------------

TITLE: Populate SvelteKit Form with Data using superValidate
DESCRIPTION: This snippet demonstrates how to pre-populate a form, typically from a database, by passing existing data to the superValidate function within a SvelteKit load function. It highlights that partial data matching the schema is sufficient and emphasizes returning the form object.
SOURCE: https://superforms.rocks/get-started/@vinejs/vine

LANGUAGE: TypeScript
CODE:
```
import { error } from '@sveltejs/kit';

export const load = async ({ params }) => {
  // Replace with your database
  const user = await db.users.findUnique({
    where: { id: params.id }
  });

  if (!user) error(404, 'Not found');

  const form = await superValidate(user, your_adapter(schema));

  // Always return { form } in load functions
  return { form };
};
```

----------------------------------------

TITLE: SvelteKit Superforms actionResult Helper API
DESCRIPTION: API reference for the `actionResult` helper in SvelteKit Superforms, used to manually construct an `ActionResult` response for form submissions when not automatically handled by a form action.
SOURCE: https://superforms.rocks/faq

LANGUAGE: APIDOC
CODE:
```
actionResult(type: data, options?: status)
```

----------------------------------------

TITLE: Server-side Validation Object Example
DESCRIPTION: This JSON-like object represents a typical validation response from `superValidate` on the server. It illustrates the structure containing the form's ID, validity status, whether it was posted, the submitted data, and any validation errors, which are crucial for updating the client-side form state.
SOURCE: https://superforms.rocks/get-started/yup

LANGUAGE: JSON
CODE:
```
{
  "id": "a3g9kke",
  "valid": false,
  "posted": true,
  "data": { "name": "Hello world!", "email": "" },
  "errors": { "email": [ "Invalid email" ] }
}
```

----------------------------------------

TITLE: Create a new SvelteKit project
DESCRIPTION: Command to scaffold a new SvelteKit application using npx. This is useful if you are starting a new project from scratch and need a SvelteKit base.
SOURCE: https://superforms.rocks/get-started/zod4

LANGUAGE: Shell
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Create New SvelteKit Application
DESCRIPTION: Initializes a new SvelteKit project named 'my-app' using the SvelteKit CLI tool 'npx sv'.
SOURCE: https://superforms.rocks/get-started/yup

LANGUAGE: shell
CODE:
```
npx sv create my-app
```

----------------------------------------

TITLE: Install Superforms and Superstruct
DESCRIPTION: Installs the SvelteKit Superforms library and the Superstruct validation library as development dependencies into your project.
SOURCE: https://superforms.rocks/get-started/superstruct

LANGUAGE: bash
CODE:
```
npm i -D sveltekit-superforms superstruct
```

----------------------------------------

TITLE: Displaying Form Data with SvelteKit SuperDebug
DESCRIPTION: This snippet shows how to integrate the SuperDebug component into a SvelteKit page to visualize the current state of a Superforms form. It helps in inspecting form data and understanding its structure during development.
SOURCE: https://superforms.rocks/get-started/json-schema

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import SuperDebug from 'sveltekit-superforms';
</script>

<SuperDebug data={$form} />
```

----------------------------------------

TITLE: Install Superforms and Joi with npm
DESCRIPTION: This command installs the 'sveltekit-superforms' library and the 'joi' validation library as development dependencies. These packages are essential for setting up Superforms with Joi for schema validation.
SOURCE: https://superforms.rocks/get-started/joi

LANGUAGE: Shell
CODE:
```
npm i -D sveltekit-superforms joi
```

----------------------------------------

TITLE: Load Initial Data in SvelteKit SPA using +page.ts
DESCRIPTION: This example illustrates how to load initial data for a SvelteKit SPA page using "+page.ts" instead of "+page.server.ts". It defines a Zod schema for user data, fetches user information from an external API based on a route parameter, and then validates and prepares the data using "sveltekit-superforms" for the form.
SOURCE: https://superforms.rocks/concepts/spa

LANGUAGE: TypeScript
CODE:
```
import { error } from '@sveltejs/kit';
import { superValidate } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { z } from 'zod';

export const _userSchema = z.object({
  id: z.number().int().positive(),
  name: z.string().min(2),
  email: z.string().email()
});

export const load = async ({ params, fetch }) => {
  const id = parseInt(params.id);

  const request = await fetch(
    `https://jsonplaceholder.typicode.com/users/${id}`
  );
  if (request.status >= 400) throw error(request.status);

  const userData = await request.json();
  const form = await superValidate(userData, zod(_userSchema));

  return { form };
};
```

----------------------------------------

TITLE: Install Superforms and Class-Validator
DESCRIPTION: Installs the sveltekit-superforms library and the class-validator dependency for form validation in a SvelteKit project using npm.
SOURCE: https://superforms.rocks/get-started/class-validator

LANGUAGE: bash
CODE:
```
npm i -D sveltekit-superforms class-validator
```

----------------------------------------

TITLE: Implementing Client-Side Error Display in SvelteKit Forms
DESCRIPTION: This Svelte component demonstrates how to destructure `errors`, `constraints`, and `message` from the `superForm` store to display validation feedback to the user. It includes examples of conditional rendering for error messages and applying HTML validation attributes.
SOURCE: https://superforms.rocks/get-started/json-schema

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  const { form, errors, constraints, message } = superForm(data.form);
  //            ^^^^^^  ^^^^^^^^^^^  ^^^^^^^
</script>

{#if $message}<h3>{$message}</h3>{/if}

<form method="POST">
  <label for="name">Name</label>
  <input
    type="text"
    name="name"
    aria-invalid={$errors.name ? 'true' : undefined}
    bind:value={$form.name}
    {...$constraints.name} />
  {#if $errors.name}<span class="invalid">{$errors.name}</span>{/if}

  <label for="email">E-mail</label>
  <input
    type="email"
    name="email"
    aria-invalid={$errors.email ? 'true' : undefined}
    bind:value={$form.email}
    {...$constraints.email} />
  {#if $errors.email}<span class="invalid">{$errors.email}</span>{/if}

  <div><button>Submit</button></div>
</form>

<style>
  .invalid {
    color: red;
  }
</style>
```

----------------------------------------

TITLE: Handle SvelteKit Superform Submission in Server Action
DESCRIPTION: This example shows how to process form submissions in a SvelteKit server action (`+page.server.ts`). It uses `superValidate` to parse and validate `FormData` from the request. If validation fails, it returns a `fail` response; otherwise, it processes the data and returns a success message using `sveltekit-superforms/message`.
SOURCE: https://superforms.rocks/get-started/zod4

LANGUAGE: TypeScript
CODE:
```
import { message } from 'sveltekit-superforms';
import { fail } from '@sveltejs/kit';

export const actions = {
  default: async ({ request }) => {
    const form = await superValidate(request, your_adapter(schema));
    console.log(form);

    if (!form.valid) {
      // Return { form } and things will just work.
      return fail(400, { form });
    }

    // TODO: Do something with the validated form.data

    // Return the form with a status message
    return message(form, 'Form posted successfully!');
  }
};
```

----------------------------------------

TITLE: SvelteKit Endpoint for User Login with actionResult
DESCRIPTION: An example of a SvelteKit `+server.ts` endpoint handling a POST request for user login. It uses `superValidate` with Zod for schema validation and returns `actionResult` based on validation success or failure.
SOURCE: https://superforms.rocks/api

LANGUAGE: TypeScript
CODE:
```
import { actionResult, superValidate, setMessage } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { z } from 'zod';

const loginSchema = z.object({
  email: z.string().email(),
  password: z.string().min(5)
});

export const POST = async ({ request }) => {
  const form = await superValidate(request, zod(loginSchema));
  if (!form.valid) return actionResult('failure', { form });

  // TODO: Verify login here //

  setMessage(form, 'Login successful!');
  return actionResult('success', { form });
};
```

----------------------------------------

TITLE: Initialize Superform in SvelteKit server load function
DESCRIPTION: This example demonstrates how to initialize a Superform within a SvelteKit `+page.server.ts` load function. It imports `superValidate` and the TypeBox adapter, then uses them with the predefined schema to create a form object. The returned `form` object is then available to your Svelte components.
SOURCE: https://superforms.rocks/get-started/@sinclair/typebox

LANGUAGE: typescript
CODE:
```
import { superValidate } from 'sveltekit-superforms';
import { typebox } from 'sveltekit-superforms/adapters';
import { Type } from '@sinclair/typebox';

// Define outside the load function so the adapter can be cached
const schema = Type.Object({
  name: Type.String({ default: 'Hello world!' }),
  email: Type.String({ format: 'email' })
});

export const load = async () => {
  const form = await superValidate(typebox(schema));

  // Always return { form } in load functions
  return { form };
};
```

----------------------------------------

TITLE: Handle SvelteKit Form Submission with superValidate
DESCRIPTION: This code illustrates how to process form submissions in SvelteKit form actions using superValidate. It shows how to access FormData via the request object, perform validation, handle invalid submissions with 'fail', and return success messages using 'message'.
SOURCE: https://superforms.rocks/get-started/@vinejs/vine

LANGUAGE: TypeScript
CODE:
```
import { message } from 'sveltekit-superforms';
import { fail } from '@sveltejs/kit';

export const actions = {
  default: async ({ request }) => {
    const form = await superValidate(request, your_adapter(schema, { defaults }));
    console.log(form);

    if (!form.valid) {
      // Return { form } and things will just work.
      return fail(400, { form });
    }

    // TODO: Do something with the validated form.data

    // Return the form with a status message
    return message(form, 'Form posted successfully!');
  }
};
```